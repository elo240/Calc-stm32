
Calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08005fe8  08005fe8  00015fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006348  08006348  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006348  08006348  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006348  08006348  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  0800652c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  0800652c  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a535  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a7a  00000000  00000000  0002a741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  0002c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e8  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002569  00000000  00000000  0002d088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008468  00000000  00000000  0002f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090dcb  00000000  00000000  00037a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002960  00000000  00000000  000c88a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fd0 	.word	0x08005fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005fd0 	.word	0x08005fd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <calc>:
#include "Kalkulator.h"

double calc(char forward, double a, double b) {//prosty switch do obsluzenia operacji
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	ed87 0b02 	vstr	d0, [r7, #8]
 8000bb4:	ed87 1b00 	vstr	d1, [r7]
 8000bb8:	75fb      	strb	r3, [r7, #23]
	double result = 0;
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	f04f 0400 	mov.w	r4, #0
 8000bc2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	switch (forward) {
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	3b2a      	subs	r3, #42	; 0x2a
 8000bca:	2b19      	cmp	r3, #25
 8000bcc:	d85f      	bhi.n	8000c8e <calc+0xe6>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <calc+0x2c>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c61 	.word	0x08000c61
 8000bd8:	08000c3d 	.word	0x08000c3d
 8000bdc:	08000c8f 	.word	0x08000c8f
 8000be0:	08000c4f 	.word	0x08000c4f
 8000be4:	08000c8f 	.word	0x08000c8f
 8000be8:	08000c73 	.word	0x08000c73
 8000bec:	08000c8f 	.word	0x08000c8f
 8000bf0:	08000c8f 	.word	0x08000c8f
 8000bf4:	08000c8f 	.word	0x08000c8f
 8000bf8:	08000c8f 	.word	0x08000c8f
 8000bfc:	08000c8f 	.word	0x08000c8f
 8000c00:	08000c8f 	.word	0x08000c8f
 8000c04:	08000c8f 	.word	0x08000c8f
 8000c08:	08000c8f 	.word	0x08000c8f
 8000c0c:	08000c8f 	.word	0x08000c8f
 8000c10:	08000c8f 	.word	0x08000c8f
 8000c14:	08000c8f 	.word	0x08000c8f
 8000c18:	08000c8f 	.word	0x08000c8f
 8000c1c:	08000c8f 	.word	0x08000c8f
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c8f 	.word	0x08000c8f
 8000c28:	08000c8f 	.word	0x08000c8f
 8000c2c:	08000c8f 	.word	0x08000c8f
 8000c30:	08000c8f 	.word	0x08000c8f
 8000c34:	08000c8f 	.word	0x08000c8f
 8000c38:	08000c85 	.word	0x08000c85
	case '+':
		result = add(a, b); break;
 8000c3c:	ed97 1b00 	vldr	d1, [r7]
 8000c40:	ed97 0b02 	vldr	d0, [r7, #8]
 8000c44:	f000 f82e 	bl	8000ca4 <add>
 8000c48:	ed87 0b06 	vstr	d0, [r7, #24]
 8000c4c:	e01f      	b.n	8000c8e <calc+0xe6>
	case '-':
		result = substract(a, b); break;
 8000c4e:	ed97 1b00 	vldr	d1, [r7]
 8000c52:	ed97 0b02 	vldr	d0, [r7, #8]
 8000c56:	f000 f83d 	bl	8000cd4 <substract>
 8000c5a:	ed87 0b06 	vstr	d0, [r7, #24]
 8000c5e:	e016      	b.n	8000c8e <calc+0xe6>
	case '*':
		result = multiply(a, b); break;
 8000c60:	ed97 1b00 	vldr	d1, [r7]
 8000c64:	ed97 0b02 	vldr	d0, [r7, #8]
 8000c68:	f000 f84c 	bl	8000d04 <multiply>
 8000c6c:	ed87 0b06 	vstr	d0, [r7, #24]
 8000c70:	e00d      	b.n	8000c8e <calc+0xe6>
	case '/':
		result = divide(a, b); break;
 8000c72:	ed97 1b00 	vldr	d1, [r7]
 8000c76:	ed97 0b02 	vldr	d0, [r7, #8]
 8000c7a:	f000 f85b 	bl	8000d34 <divide>
 8000c7e:	ed87 0b06 	vstr	d0, [r7, #24]
 8000c82:	e004      	b.n	8000c8e <calc+0xe6>
	case 'C':
		result = clear(); break;
 8000c84:	f000 f87e 	bl	8000d84 <clear>
 8000c88:	ed87 0b06 	vstr	d0, [r7, #24]
 8000c8c:	bf00      	nop
	}
	return result;
 8000c8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000c92:	ec44 3b17 	vmov	d7, r3, r4
}
 8000c96:	eeb0 0a47 	vmov.f32	s0, s14
 8000c9a:	eef0 0a67 	vmov.f32	s1, s15
 8000c9e:	3724      	adds	r7, #36	; 0x24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd90      	pop	{r4, r7, pc}

08000ca4 <add>:

double add(double a, double b) {
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	ed87 0b02 	vstr	d0, [r7, #8]
 8000cae:	ed87 1b00 	vstr	d1, [r7]
	return a + b;
 8000cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cba:	f7ff fae7 	bl	800028c <__adddf3>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000cca:	eef0 0a67 	vmov.f32	s1, s15
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd90      	pop	{r4, r7, pc}

08000cd4 <substract>:
double substract(double a, double b) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	ed87 0b02 	vstr	d0, [r7, #8]
 8000cde:	ed87 1b00 	vstr	d1, [r7]
	return a - b;
 8000ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ce6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cea:	f7ff facd 	bl	8000288 <__aeabi_dsub>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	ec44 3b17 	vmov	d7, r3, r4
}
 8000cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8000cfa:	eef0 0a67 	vmov.f32	s1, s15
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <multiply>:
double multiply(double a, double b) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d0e:	ed87 1b00 	vstr	d1, [r7]
	return a * b;
 8000d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d1a:	f7ff fc6d 	bl	80005f8 <__aeabi_dmul>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d26:	eeb0 0a47 	vmov.f32	s0, s14
 8000d2a:	eef0 0a67 	vmov.f32	s1, s15
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}

08000d34 <divide>:
double divide(double a, double b) {
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d3e:	ed87 1b00 	vstr	d1, [r7]
	if (b != 0)
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	f04f 0300 	mov.w	r3, #0
 8000d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d4e:	f7ff febb 	bl	8000ac8 <__aeabi_dcmpeq>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d108      	bne.n	8000d6a <divide+0x36>
		return a / b;
 8000d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d60:	f7ff fd74 	bl	800084c <__aeabi_ddiv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	460c      	mov	r4, r1
 8000d68:	e003      	b.n	8000d72 <divide+0x3e>
	else
		return 0;//unikniecie dzielenia przez 0
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	f04f 0400 	mov.w	r4, #0
 8000d72:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d76:	eeb0 0a47 	vmov.f32	s0, s14
 8000d7a:	eef0 0a67 	vmov.f32	s1, s15
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <clear>:
double clear() {
 8000d84:	b490      	push	{r4, r7}
 8000d86:	af00      	add	r7, sp, #0
	return 0;
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	f04f 0400 	mov.w	r4, #0
 8000d90:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d94:	eeb0 0a47 	vmov.f32	s0, s14
 8000d98:	eef0 0a67 	vmov.f32	s1, s15
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc90      	pop	{r4, r7}
 8000da0:	4770      	bx	lr
	...

08000da4 <read_pad>:
#include "Keypad.h"

char read_pad(void) {//polling
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
//			'4','5','6','B',
//			'7','8','9','C',
//			'*','0','#','D' };

	//1 rzad
	HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_RESET);//wiersz stan niski
 8000da8:	2200      	movs	r2, #0
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	48be      	ldr	r0, [pc, #760]	; (80010a8 <read_pad+0x304>)
 8000dae:	f001 fa35 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_SET);//wiersz stan wysoki
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	48bd      	ldr	r0, [pc, #756]	; (80010ac <read_pad+0x308>)
 8000db8:	f001 fa30 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	48bb      	ldr	r0, [pc, #748]	; (80010b0 <read_pad+0x30c>)
 8000dc2:	f001 fa2b 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2180      	movs	r1, #128	; 0x80
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f001 fa25 	bl	800221c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN))) {//kolumna stan niski
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f001 fa08 	bl	80021ec <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10a      	bne.n	8000df8 <read_pad+0x54>
		while (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN)));//dopoki przycisk nie wcisniety
 8000de2:	bf00      	nop
 8000de4:	2120      	movs	r1, #32
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dea:	f001 f9ff 	bl	80021ec <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f7      	beq.n	8000de4 <read_pad+0x40>
			return '1';
 8000df4:	2331      	movs	r3, #49	; 0x31
 8000df6:	e154      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN))) {
 8000df8:	2110      	movs	r1, #16
 8000dfa:	48ae      	ldr	r0, [pc, #696]	; (80010b4 <read_pad+0x310>)
 8000dfc:	f001 f9f6 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d109      	bne.n	8000e1a <read_pad+0x76>
		while (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN)));
 8000e06:	bf00      	nop
 8000e08:	2110      	movs	r1, #16
 8000e0a:	48aa      	ldr	r0, [pc, #680]	; (80010b4 <read_pad+0x310>)
 8000e0c:	f001 f9ee 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f8      	beq.n	8000e08 <read_pad+0x64>
			return '2';
 8000e16:	2332      	movs	r3, #50	; 0x32
 8000e18:	e143      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN))) {
 8000e1a:	2108      	movs	r1, #8
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f001 f9e4 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10a      	bne.n	8000e40 <read_pad+0x9c>
		while (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN)));
 8000e2a:	bf00      	nop
 8000e2c:	2108      	movs	r1, #8
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f001 f9db 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d0f7      	beq.n	8000e2c <read_pad+0x88>
			return '3';
 8000e3c:	2333      	movs	r3, #51	; 0x33
 8000e3e:	e130      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN))) {
 8000e40:	2102      	movs	r1, #2
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f001 f9d1 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d10a      	bne.n	8000e66 <read_pad+0xc2>
		while (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN)));
 8000e50:	bf00      	nop
 8000e52:	2102      	movs	r1, #2
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f001 f9c8 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f7      	beq.n	8000e52 <read_pad+0xae>
			return 'A';
 8000e62:	2341      	movs	r3, #65	; 0x41
 8000e64:	e11d      	b.n	80010a2 <read_pad+0x2fe>
	}

	//2 rzad
	HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	488f      	ldr	r0, [pc, #572]	; (80010a8 <read_pad+0x304>)
 8000e6c:	f001 f9d6 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2102      	movs	r1, #2
 8000e74:	488d      	ldr	r0, [pc, #564]	; (80010ac <read_pad+0x308>)
 8000e76:	f001 f9d1 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	488c      	ldr	r0, [pc, #560]	; (80010b0 <read_pad+0x30c>)
 8000e80:	f001 f9cc 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f001 f9c6 	bl	800221c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN))) {
 8000e90:	2120      	movs	r1, #32
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f001 f9a9 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10a      	bne.n	8000eb6 <read_pad+0x112>
		while (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN)));
 8000ea0:	bf00      	nop
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea8:	f001 f9a0 	bl	80021ec <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f7      	beq.n	8000ea2 <read_pad+0xfe>
			return '4';
 8000eb2:	2334      	movs	r3, #52	; 0x34
 8000eb4:	e0f5      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN))) {
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	487e      	ldr	r0, [pc, #504]	; (80010b4 <read_pad+0x310>)
 8000eba:	f001 f997 	bl	80021ec <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d109      	bne.n	8000ed8 <read_pad+0x134>
		while (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN)));
 8000ec4:	bf00      	nop
 8000ec6:	2110      	movs	r1, #16
 8000ec8:	487a      	ldr	r0, [pc, #488]	; (80010b4 <read_pad+0x310>)
 8000eca:	f001 f98f 	bl	80021ec <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f8      	beq.n	8000ec6 <read_pad+0x122>
			return '5';
 8000ed4:	2335      	movs	r3, #53	; 0x35
 8000ed6:	e0e4      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN))) {
 8000ed8:	2108      	movs	r1, #8
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f001 f985 	bl	80021ec <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10a      	bne.n	8000efe <read_pad+0x15a>
		while (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN)));
 8000ee8:	bf00      	nop
 8000eea:	2108      	movs	r1, #8
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 f97c 	bl	80021ec <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f7      	beq.n	8000eea <read_pad+0x146>
			return '6';
 8000efa:	2336      	movs	r3, #54	; 0x36
 8000efc:	e0d1      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN))) {
 8000efe:	2102      	movs	r1, #2
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f001 f972 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10a      	bne.n	8000f24 <read_pad+0x180>
		while (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN)));
 8000f0e:	bf00      	nop
 8000f10:	2102      	movs	r1, #2
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f001 f969 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f7      	beq.n	8000f10 <read_pad+0x16c>
			return 'B';
 8000f20:	2342      	movs	r3, #66	; 0x42
 8000f22:	e0be      	b.n	80010a2 <read_pad+0x2fe>
	}

	//3 rzad
	HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2180      	movs	r1, #128	; 0x80
 8000f28:	485f      	ldr	r0, [pc, #380]	; (80010a8 <read_pad+0x304>)
 8000f2a:	f001 f977 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2102      	movs	r1, #2
 8000f32:	485e      	ldr	r0, [pc, #376]	; (80010ac <read_pad+0x308>)
 8000f34:	f001 f972 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	485c      	ldr	r0, [pc, #368]	; (80010b0 <read_pad+0x30c>)
 8000f3e:	f001 f96d 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 f967 	bl	800221c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN))) {
 8000f4e:	2120      	movs	r1, #32
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f54:	f001 f94a 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <read_pad+0x1d0>
		while (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN)));
 8000f5e:	bf00      	nop
 8000f60:	2120      	movs	r1, #32
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f001 f941 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f7      	beq.n	8000f60 <read_pad+0x1bc>
			return '7';
 8000f70:	2337      	movs	r3, #55	; 0x37
 8000f72:	e096      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN))) {
 8000f74:	2110      	movs	r1, #16
 8000f76:	484f      	ldr	r0, [pc, #316]	; (80010b4 <read_pad+0x310>)
 8000f78:	f001 f938 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <read_pad+0x1f2>
		while (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN)));
 8000f82:	bf00      	nop
 8000f84:	2110      	movs	r1, #16
 8000f86:	484b      	ldr	r0, [pc, #300]	; (80010b4 <read_pad+0x310>)
 8000f88:	f001 f930 	bl	80021ec <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f8      	beq.n	8000f84 <read_pad+0x1e0>
			return '8';
 8000f92:	2338      	movs	r3, #56	; 0x38
 8000f94:	e085      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN))) {
 8000f96:	2108      	movs	r1, #8
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f001 f926 	bl	80021ec <HAL_GPIO_ReadPin>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <read_pad+0x218>
		while (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN)));
 8000fa6:	bf00      	nop
 8000fa8:	2108      	movs	r1, #8
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 f91d 	bl	80021ec <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f7      	beq.n	8000fa8 <read_pad+0x204>
			return '9';
 8000fb8:	2339      	movs	r3, #57	; 0x39
 8000fba:	e072      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN))) {
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f001 f913 	bl	80021ec <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10a      	bne.n	8000fe2 <read_pad+0x23e>
		while (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN)));
 8000fcc:	bf00      	nop
 8000fce:	2102      	movs	r1, #2
 8000fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd4:	f001 f90a 	bl	80021ec <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f7      	beq.n	8000fce <read_pad+0x22a>
			return 'C';
 8000fde:	2343      	movs	r3, #67	; 0x43
 8000fe0:	e05f      	b.n	80010a2 <read_pad+0x2fe>
	}

	//4 rzad
	HAL_GPIO_WritePin(R1_PORT, R1_PIN, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4830      	ldr	r0, [pc, #192]	; (80010a8 <read_pad+0x304>)
 8000fe8:	f001 f918 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R2_PORT, R2_PIN, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2102      	movs	r1, #2
 8000ff0:	482e      	ldr	r0, [pc, #184]	; (80010ac <read_pad+0x308>)
 8000ff2:	f001 f913 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R3_PORT, R3_PIN, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	482d      	ldr	r0, [pc, #180]	; (80010b0 <read_pad+0x30c>)
 8000ffc:	f001 f90e 	bl	800221c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R4_PORT, R4_PIN, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001008:	f001 f908 	bl	800221c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN))) {
 800100c:	2120      	movs	r1, #32
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f001 f8eb 	bl	80021ec <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10a      	bne.n	8001032 <read_pad+0x28e>
		while (!(HAL_GPIO_ReadPin(C1_PORT, C1_PIN)));
 800101c:	bf00      	nop
 800101e:	2120      	movs	r1, #32
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f001 f8e2 	bl	80021ec <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f7      	beq.n	800101e <read_pad+0x27a>
			return '*';
 800102e:	232a      	movs	r3, #42	; 0x2a
 8001030:	e037      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN))) {
 8001032:	2110      	movs	r1, #16
 8001034:	481f      	ldr	r0, [pc, #124]	; (80010b4 <read_pad+0x310>)
 8001036:	f001 f8d9 	bl	80021ec <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <read_pad+0x2b0>
		while (!(HAL_GPIO_ReadPin(C2_PORT, C2_PIN)));
 8001040:	bf00      	nop
 8001042:	2110      	movs	r1, #16
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <read_pad+0x310>)
 8001046:	f001 f8d1 	bl	80021ec <HAL_GPIO_ReadPin>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f8      	beq.n	8001042 <read_pad+0x29e>
			return '0';
 8001050:	2330      	movs	r3, #48	; 0x30
 8001052:	e026      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN))) {
 8001054:	2108      	movs	r1, #8
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f001 f8c7 	bl	80021ec <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10a      	bne.n	800107a <read_pad+0x2d6>
		while (!(HAL_GPIO_ReadPin(C3_PORT, C3_PIN)));
 8001064:	bf00      	nop
 8001066:	2108      	movs	r1, #8
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 f8be 	bl	80021ec <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f7      	beq.n	8001066 <read_pad+0x2c2>
			return '#';
 8001076:	2323      	movs	r3, #35	; 0x23
 8001078:	e013      	b.n	80010a2 <read_pad+0x2fe>
	}
	if (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN))) {
 800107a:	2102      	movs	r1, #2
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f001 f8b4 	bl	80021ec <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10a      	bne.n	80010a0 <read_pad+0x2fc>
		while (!(HAL_GPIO_ReadPin(C4_PORT, C4_PIN)));
 800108a:	bf00      	nop
 800108c:	2102      	movs	r1, #2
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f001 f8ab 	bl	80021ec <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f7      	beq.n	800108c <read_pad+0x2e8>
			return 'D';
 800109c:	2344      	movs	r3, #68	; 0x44
 800109e:	e000      	b.n	80010a2 <read_pad+0x2fe>
	}
	return 'E';
 80010a0:	2345      	movs	r3, #69	; 0x45
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	48001000 	.word	0x48001000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48001400 	.word	0x48001400

080010b8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd(char cmd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af02      	add	r7, sp, #8
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f023 030f 	bic.w	r3, r3, #15
 80010c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;  //en=1, rs=0
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f043 030c 	orr.w	r3, r3, #12
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;  //en=0, rs=0
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;  //en=1, rs=0
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	f043 030c 	orr.w	r3, r3, #12
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;  //en=0, rs=0
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*)data_t, 4, 100);
 80010f8:	f107 0208 	add.w	r2, r7, #8
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2304      	movs	r3, #4
 8001102:	214e      	movs	r1, #78	; 0x4e
 8001104:	4803      	ldr	r0, [pc, #12]	; (8001114 <lcd_send_cmd+0x5c>)
 8001106:	f001 f931 	bl	800236c <HAL_I2C_Master_Transmit>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000204 	.word	0x20000204

08001118 <lcd_send_data>:

void lcd_send_data(char data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af02      	add	r7, sp, #8
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f023 030f 	bic.w	r3, r3, #15
 8001128:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	f043 030d 	orr.w	r3, r3, #13
 8001136:	b2db      	uxtb	r3, r3
 8001138:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;  //en=0, rs=1
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f043 0309 	orr.w	r3, r3, #9
 8001140:	b2db      	uxtb	r3, r3
 8001142:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	f043 030d 	orr.w	r3, r3, #13
 800114a:	b2db      	uxtb	r3, r3
 800114c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;  //en=0, rs=1
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	f043 0309 	orr.w	r3, r3, #9
 8001154:	b2db      	uxtb	r3, r3
 8001156:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t*)data_t, 4, 100);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2364      	movs	r3, #100	; 0x64
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2304      	movs	r3, #4
 8001162:	214e      	movs	r1, #78	; 0x4e
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <lcd_send_data+0x5c>)
 8001166:	f001 f901 	bl	800236c <HAL_I2C_Master_Transmit>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000204 	.word	0x20000204

08001178 <lcd_clear>:

void lcd_clear(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 800117e:	2080      	movs	r0, #128	; 0x80
 8001180:	f7ff ff9a 	bl	80010b8 <lcd_send_cmd>
	for (int i = 0; i < 70; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	e005      	b.n	8001196 <lcd_clear+0x1e>
	{
		lcd_send_data(' ');//czyszczenie jako pisanie spacji na kazdej pozycji
 800118a:	2020      	movs	r0, #32
 800118c:	f7ff ffc4 	bl	8001118 <lcd_send_data>
	for (int i = 0; i < 70; i++)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b45      	cmp	r3, #69	; 0x45
 800119a:	ddf6      	ble.n	800118a <lcd_clear+0x12>
	}
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	switch (row)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <lcd_put_cur+0x16>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d005      	beq.n	80011c4 <lcd_put_cur+0x20>
 80011b8:	e009      	b.n	80011ce <lcd_put_cur+0x2a>
	{
	case 0:
		col |= 0x80;//suma 1 rzedu liczby i kolumny
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	603b      	str	r3, [r7, #0]
		break;
 80011c2:	e004      	b.n	80011ce <lcd_put_cur+0x2a>
	case 1:
		col |= 0xC0;//suma 2 rzedu liczby i kolumny
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80011ca:	603b      	str	r3, [r7, #0]
		break;
 80011cc:	bf00      	nop
	}

	lcd_send_cmd(col);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff70 	bl	80010b8 <lcd_send_cmd>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <lcd_init>:


void lcd_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f000 fd7f 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80011ea:	2030      	movs	r0, #48	; 0x30
 80011ec:	f7ff ff64 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80011f0:	2005      	movs	r0, #5
 80011f2:	f000 fd79 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x30);
 80011f6:	2030      	movs	r0, #48	; 0x30
 80011f8:	f7ff ff5e 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 fd73 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x30);
 8001202:	2030      	movs	r0, #48	; 0x30
 8001204:	f7ff ff58 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 fd6d 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800120e:	2020      	movs	r0, #32
 8001210:	f7ff ff52 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f000 fd67 	bl	8001ce8 <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f7ff ff4c 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f000 fd61 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001226:	2008      	movs	r0, #8
 8001228:	f7ff ff46 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f000 fd5b 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff ff40 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 fd55 	bl	8001ce8 <HAL_Delay>
	HAL_Delay(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 fd52 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001244:	2006      	movs	r0, #6
 8001246:	f7ff ff37 	bl	80010b8 <lcd_send_cmd>
	HAL_Delay(1);
 800124a:	2001      	movs	r0, #1
 800124c:	f000 fd4c 	bl	8001ce8 <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001250:	200c      	movs	r0, #12
 8001252:	f7ff ff31 	bl	80010b8 <lcd_send_cmd>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}

0800125a <lcd_send_string>:

void lcd_send_string(char* str)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001262:	e006      	b.n	8001272 <lcd_send_string+0x18>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff53 	bl	8001118 <lcd_send_data>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f4      	bne.n	8001264 <lcd_send_string+0xa>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <show_calc>:

void show_calc(double first, double second, char* operation) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0b04 	vstr	d0, [r7, #16]
 800128e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001292:	6078      	str	r0, [r7, #4]
	char firstchar[15];
	char secondchar[15];
	sprintf(firstchar, "%lf", first);
 8001294:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800129c:	491d      	ldr	r1, [pc, #116]	; (8001314 <show_calc+0x90>)
 800129e:	f003 fb75 	bl	800498c <siprintf>
	lcd_put_cur(0, 16 - strlen(firstchar));
 80012a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffe2 	bl	8000270 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f1c3 0310 	rsb	r3, r3, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff75 	bl	80011a4 <lcd_put_cur>
	lcd_send_string(firstchar);//wyswietl first;
 80012ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ffcb 	bl	800125a <lcd_send_string>

	if(operation!='C'){//jezeli wybrano operacje
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b43      	cmp	r3, #67	; 0x43
 80012c8:	d020      	beq.n	800130c <show_calc+0x88>
		lcd_put_cur(1, 0);
 80012ca:	2100      	movs	r1, #0
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff ff69 	bl	80011a4 <lcd_put_cur>
		lcd_send_data(operation);//wyswietl operation;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff1e 	bl	8001118 <lcd_send_data>

		sprintf(secondchar, "%lf", second);
 80012dc:	f107 0018 	add.w	r0, r7, #24
 80012e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e4:	490b      	ldr	r1, [pc, #44]	; (8001314 <show_calc+0x90>)
 80012e6:	f003 fb51 	bl	800498c <siprintf>
		lcd_put_cur(1, 16 - strlen(secondchar));
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7fe ffbe 	bl	8000270 <strlen>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f1c3 0310 	rsb	r3, r3, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	2001      	movs	r0, #1
 80012fe:	f7ff ff51 	bl	80011a4 <lcd_put_cur>
		lcd_send_string(secondchar);//wyswietl second;
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ffa7 	bl	800125a <lcd_send_string>
	}
}
 800130c:	bf00      	nop
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	08005fe8 	.word	0x08005fe8

08001318 <show_reader>:
void show_reader(char* line1, char* line2) {//sprawdzone
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
	lcd_clear();
 8001322:	f7ff ff29 	bl	8001178 <lcd_clear>
	lcd_put_cur(0, 0);
 8001326:	2100      	movs	r1, #0
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff ff3b 	bl	80011a4 <lcd_put_cur>
	lcd_send_string(line1);//wyswietl 1 linie;
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff93 	bl	800125a <lcd_send_string>
	lcd_put_cur(1, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ff34 	bl	80011a4 <lcd_put_cur>
	lcd_send_string(line2);//wyswietl 2 linie;
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ff8c 	bl	800125a <lcd_send_string>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b5b0      	push	{r4, r5, r7, lr}
 800134e:	b0b2      	sub	sp, #200	; 0xc8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f000 fc63 	bl	8001c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f9e1 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 fa7b 	bl	8001854 <MX_GPIO_Init>
  MX_I2C1_Init();
 800135e:	f000 fa39 	bl	80017d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001362:	f7ff ff3d 	bl	80011e0 <lcd_init>
//  mykeypad.OUT2pin=GPIO_PIN_1;
//  mykeypad.OUT3_Port=GPIOE;
//  mykeypad.OUT3pin=GPIO_PIN_7;
//  Keypad4x4_Init(&mykeypad);

  char tab[5] = { '0','0','0','0','0' };
 8001366:	4adf      	ldr	r2, [pc, #892]	; (80016e4 <main+0x398>)
 8001368:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800136c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001370:	6018      	str	r0, [r3, #0]
 8001372:	3304      	adds	r3, #4
 8001374:	7019      	strb	r1, [r3, #0]
  const char pwd = "1234C";//po dostepne znaki patrz keypad.c char key
 8001376:	4bdc      	ldr	r3, [pc, #880]	; (80016e8 <main+0x39c>)
 8001378:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  int correctPwd;
  int pwdCorrect = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  char character;
  double first = 0;
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
  double second = 0;
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	f04f 0400 	mov.w	r4, #0
 8001396:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
  char operation = 'C';
 800139a:	2343      	movs	r3, #67	; 0x43
 800139c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  int reset=0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  char read[100];
  sprintf(read,"Lorem ipsum dolor sit amet, consectetur adipiscing elit.");
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	4ad0      	ldr	r2, [pc, #832]	; (80016ec <main+0x3a0>)
 80013ac:	461c      	mov	r4, r3
 80013ae:	4615      	mov	r5, r2
 80013b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c0:	c403      	stmia	r4!, {r0, r1}
 80013c2:	7022      	strb	r2, [r4, #0]
  int lineNr=0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  char print1[17];
  char print2[17];
  lcd_clear();
 80013ca:	f7ff fed5 	bl	8001178 <lcd_clear>
  lcd_put_cur(0, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff fee7 	bl	80011a4 <lcd_put_cur>
//			  lcd_send_string(Keypad4x4_GetChar(i));
//		  }
//	  }
	  do{

		  character=read_pad();//czytanie znaku z keypada
 80013d6:	f7ff fce5 	bl	8000da4 <read_pad>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f000 fc81 	bl	8001ce8 <HAL_Delay>
	  }while(character=='E');//zabezpieczenie przed nieprawidlowym wejsciem
 80013e6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80013ea:	2b45      	cmp	r3, #69	; 0x45
 80013ec:	d0f3      	beq.n	80013d6 <main+0x8a>
//	  lcd_send_data(character);

	  	  	  //jezeli haslo poprawne
  	  		if (pwdCorrect) {//ukryty czytnik
 80013ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d06b      	beq.n	80014ce <main+0x182>
  	  			if (character == 'C')//wyjscie
 80013f6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80013fa:	2b43      	cmp	r3, #67	; 0x43
 80013fc:	d102      	bne.n	8001404 <main+0xb8>
  	  				pwdCorrect = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  	  			switch (character){//obsluga czytnika
 8001404:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001408:	2b32      	cmp	r3, #50	; 0x32
 800140a:	d002      	beq.n	8001412 <main+0xc6>
 800140c:	2b38      	cmp	r3, #56	; 0x38
 800140e:	d027      	beq.n	8001460 <main+0x114>
  	  				memcpy(print2, &read[0 + 16 * (lineNr + 1)], 16);
  	  				print1[16] = '\0';
  	  				print2[16] = '\0';
  	  				break;
  	  			default:
  	  				break;
 8001410:	e055      	b.n	80014be <main+0x172>
  	  				if (lineNr > 0) {
 8001412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001416:	2b00      	cmp	r3, #0
 8001418:	dd04      	ble.n	8001424 <main+0xd8>
  	  					lineNr--;
 800141a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800141e:	3b01      	subs	r3, #1
 8001420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  	  				memcpy(print1, &read[0 + 16 * lineNr], 16);//substr bez ostatniego znaku(dokad,co[odkad],ile)
 8001424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800142e:	18d1      	adds	r1, r2, r3
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	2210      	movs	r2, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fd80 	bl	8003f3c <memcpy>
  	  				memcpy(print2, &read[0 + 16 * (lineNr+1)], 16);
 800143c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001440:	3301      	adds	r3, #1
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001448:	18d1      	adds	r1, r2, r3
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2210      	movs	r2, #16
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fd74 	bl	8003f3c <memcpy>
  	  				print1[16] = '\0';//zakonczenie zmiennej
 8001454:	2300      	movs	r3, #0
 8001456:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  	  				print2[16] = '\0';
 800145a:	2300      	movs	r3, #0
 800145c:	753b      	strb	r3, [r7, #20]
  	  				;break;
 800145e:	e02e      	b.n	80014be <main+0x172>
  	  				if (strlen(read) / 16 - 1 != lineNr) {
 8001460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001464:	4618      	mov	r0, r3
 8001466:	f7fe ff03 	bl	8000270 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001474:	429a      	cmp	r2, r3
 8001476:	d004      	beq.n	8001482 <main+0x136>
  	  					lineNr++;
 8001478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800147c:	3301      	adds	r3, #1
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  	  				memcpy(print1, &read[0 + 16 * lineNr], 16);
 8001482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800148c:	18d1      	adds	r1, r2, r3
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2210      	movs	r2, #16
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fd51 	bl	8003f3c <memcpy>
  	  				memcpy(print2, &read[0 + 16 * (lineNr + 1)], 16);
 800149a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800149e:	3301      	adds	r3, #1
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80014a6:	18d1      	adds	r1, r2, r3
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2210      	movs	r2, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f002 fd45 	bl	8003f3c <memcpy>
  	  				print1[16] = '\0';
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  	  				print2[16] = '\0';
 80014b8:	2300      	movs	r3, #0
 80014ba:	753b      	strb	r3, [r7, #20]
  	  				break;
 80014bc:	bf00      	nop
  	  			}

  	  			show_reader(print1, print2);//drukowanie obu lini
 80014be:	1d3a      	adds	r2, r7, #4
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff26 	bl	8001318 <show_reader>
 80014cc:	e783      	b.n	80013d6 <main+0x8a>

  	  		}
  	  		else {//kalkulator
  	  		show_calc(first, second, operation);
 80014ce:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80014d2:	4618      	mov	r0, r3
 80014d4:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 80014d8:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 80014dc:	f7ff fed2 	bl	8001284 <show_calc>
  	  			tab[0] = tab[1];//tablica z historia klawiszy
 80014e0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80014e4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  	  			tab[1] = tab[2];
 80014e8:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80014ec:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
  	  			tab[2] = tab[3];
 80014f0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80014f4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  	  			tab[3] = tab[4];
 80014f8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80014fc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  	  			tab[4] = character;
 8001500:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001504:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  	  			correctPwd = strncmp(tab, pwd, sizeof(tab));//sprawdzenie hasla
 8001508:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800150c:	4619      	mov	r1, r3
 800150e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001512:	2205      	movs	r2, #5
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fa59 	bl	80049cc <strncmp>
 800151a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
  	  			if (correctPwd == 0) {//jezeli haslo poprawne
 800151e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001522:	2b00      	cmp	r3, #0
 8001524:	d113      	bne.n	800154e <main+0x202>
	  	  	  	  	  lcd_clear();
 8001526:	f7ff fe27 	bl	8001178 <lcd_clear>
	  	  	  	  	  lcd_put_cur(0, 0);//drukowanie instrukcji
 800152a:	2100      	movs	r1, #0
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fe39 	bl	80011a4 <lcd_put_cur>
	  	  	  	  	  lcd_send_string("2 przewin w gore");
 8001532:	486f      	ldr	r0, [pc, #444]	; (80016f0 <main+0x3a4>)
 8001534:	f7ff fe91 	bl	800125a <lcd_send_string>
	  	  	  	  	  lcd_put_cur(0, 0);
 8001538:	2100      	movs	r1, #0
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fe32 	bl	80011a4 <lcd_put_cur>
	  	  	  	  	  lcd_send_string("8 przewin w dol");
 8001540:	486c      	ldr	r0, [pc, #432]	; (80016f4 <main+0x3a8>)
 8001542:	f7ff fe8a 	bl	800125a <lcd_send_string>
  	  				pwdCorrect = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800154c:	e743      	b.n	80013d6 <main+0x8a>
  	  			}
  	  			else {
  	  				if (isdigit(character) && operation == 'C')//pierwsza liczba
 800154e:	f002 fcd5 	bl	8003efc <__locale_ctype_ptr>
 8001552:	4602      	mov	r2, r0
 8001554:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001558:	3301      	adds	r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d027      	beq.n	80015b6 <main+0x26a>
 8001566:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800156a:	2b43      	cmp	r3, #67	; 0x43
 800156c:	d123      	bne.n	80015b6 <main+0x26a>
  	  					first = first * 10 + character - 48;//['0'-'9']=[48-59]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <main+0x3ac>)
 8001574:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001578:	f7ff f83e 	bl	80005f8 <__aeabi_dmul>
 800157c:	4603      	mov	r3, r0
 800157e:	460c      	mov	r4, r1
 8001580:	4625      	mov	r5, r4
 8001582:	461c      	mov	r4, r3
 8001584:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffcb 	bl	8000524 <__aeabi_i2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fe79 	bl	800028c <__adddf3>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b55      	ldr	r3, [pc, #340]	; (80016fc <main+0x3b0>)
 80015a8:	f7fe fe6e 	bl	8000288 <__aeabi_dsub>
 80015ac:	4603      	mov	r3, r0
 80015ae:	460c      	mov	r4, r1
 80015b0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
 80015b4:	e0b0      	b.n	8001718 <main+0x3cc>
  	  				else if (isdigit(character))//druga liczba
 80015b6:	f002 fca1 	bl	8003efc <__locale_ctype_ptr>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015c0:	3301      	adds	r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <main+0x2ca>
  	  					second = second * 10 + character - 48;
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <main+0x3ac>)
 80015d4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80015d8:	f7ff f80e 	bl	80005f8 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4625      	mov	r5, r4
 80015e2:	461c      	mov	r4, r3
 80015e4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ff9b 	bl	8000524 <__aeabi_i2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe49 	bl	800028c <__adddf3>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4618      	mov	r0, r3
 8001600:	4621      	mov	r1, r4
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b3d      	ldr	r3, [pc, #244]	; (80016fc <main+0x3b0>)
 8001608:	f7fe fe3e 	bl	8000288 <__aeabi_dsub>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 8001614:	e6df      	b.n	80013d6 <main+0x8a>
  	  				else {
  	  					switch (character){//sterowanie dzialaniami
 8001616:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800161a:	3b23      	subs	r3, #35	; 0x23
 800161c:	2b21      	cmp	r3, #33	; 0x21
 800161e:	d86f      	bhi.n	8001700 <main+0x3b4>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <main+0x2dc>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001701 	.word	0x08001701
 800162c:	08001701 	.word	0x08001701
 8001630:	08001701 	.word	0x08001701
 8001634:	08001701 	.word	0x08001701
 8001638:	08001701 	.word	0x08001701
 800163c:	08001701 	.word	0x08001701
 8001640:	08001701 	.word	0x08001701
 8001644:	080016d1 	.word	0x080016d1
 8001648:	08001701 	.word	0x08001701
 800164c:	08001701 	.word	0x08001701
 8001650:	08001701 	.word	0x08001701
 8001654:	08001701 	.word	0x08001701
 8001658:	08001701 	.word	0x08001701
 800165c:	08001701 	.word	0x08001701
 8001660:	08001701 	.word	0x08001701
 8001664:	08001701 	.word	0x08001701
 8001668:	08001701 	.word	0x08001701
 800166c:	08001701 	.word	0x08001701
 8001670:	08001701 	.word	0x08001701
 8001674:	08001701 	.word	0x08001701
 8001678:	08001701 	.word	0x08001701
 800167c:	08001701 	.word	0x08001701
 8001680:	08001701 	.word	0x08001701
 8001684:	08001701 	.word	0x08001701
 8001688:	08001701 	.word	0x08001701
 800168c:	08001701 	.word	0x08001701
 8001690:	08001701 	.word	0x08001701
 8001694:	08001701 	.word	0x08001701
 8001698:	08001701 	.word	0x08001701
 800169c:	08001701 	.word	0x08001701
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016b9 	.word	0x080016b9
 80016a8:	080016c1 	.word	0x080016c1
 80016ac:	080016c9 	.word	0x080016c9
  	  					/*		'1', '2', '3', 'A',
  	  							'4', '5', '6', 'B',
  	  							'7', '8', '9', 'C',
  	  							'*', '0', '#', 'D'
  	  					*/
  	  						case 'A':operation = '/'; break;
 80016b0:	232f      	movs	r3, #47	; 0x2f
 80016b2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016b6:	e024      	b.n	8001702 <main+0x3b6>
  	  						case 'B':operation = '*'; break;
 80016b8:	232a      	movs	r3, #42	; 0x2a
 80016ba:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016be:	e020      	b.n	8001702 <main+0x3b6>
  	  						case 'C':operation = '-'; break;
 80016c0:	232d      	movs	r3, #45	; 0x2d
 80016c2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016c6:	e01c      	b.n	8001702 <main+0x3b6>
  	  						case 'D':operation = '+'; break;
 80016c8:	232b      	movs	r3, #43	; 0x2b
 80016ca:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016ce:	e018      	b.n	8001702 <main+0x3b6>
  	  						case '*':operation = 'C';second=0; break;//zerowanie drugiej liczby
 80016d0:	2343      	movs	r3, #67	; 0x43
 80016d2:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	f04f 0400 	mov.w	r4, #0
 80016de:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
 80016e2:	e00e      	b.n	8001702 <main+0x3b6>
 80016e4:	08006054 	.word	0x08006054
 80016e8:	08005fec 	.word	0x08005fec
 80016ec:	08005ff4 	.word	0x08005ff4
 80016f0:	08006030 	.word	0x08006030
 80016f4:	08006044 	.word	0x08006044
 80016f8:	40240000 	.word	0x40240000
 80016fc:	40480000 	.word	0x40480000
  	  						case '#':break;//=
  	  						default:break;
 8001700:	bf00      	nop
  	  					}
  	  					first = calc(operation, first, second);
 8001702:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001706:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 800170a:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fa4a 	bl	8000ba8 <calc>
 8001714:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
  while (1)
 8001718:	e65d      	b.n	80013d6 <main+0x8a>
 800171a:	bf00      	nop

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b09e      	sub	sp, #120	; 0x78
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001726:	2228      	movs	r2, #40	; 0x28
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f002 fc11 	bl	8003f52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	223c      	movs	r2, #60	; 0x3c
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fc03 	bl	8003f52 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800174c:	2303      	movs	r3, #3
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001754:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175a:	2301      	movs	r3, #1
 800175c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800175e:	2310      	movs	r3, #16
 8001760:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001762:	2302      	movs	r3, #2
 8001764:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800176c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001770:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001776:	4618      	mov	r0, r3
 8001778:	f001 f8f8 	bl	800296c <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001782:	f000 f923 	bl	80019cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178a:	2302      	movs	r3, #2
 800178c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 ffea 	bl	800377c <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ae:	f000 f90d 	bl	80019cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b2:	2320      	movs	r3, #32
 80017b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ba:	463b      	mov	r3, r7
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 f9c3 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017c8:	f000 f900 	bl	80019cc <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3778      	adds	r7, #120	; 0x78
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_I2C1_Init+0x74>)
 80017da:	4a1c      	ldr	r2, [pc, #112]	; (800184c <MX_I2C1_Init+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_I2C1_Init+0x74>)
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <MX_I2C1_Init+0x7c>)
 80017e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_I2C1_Init+0x74>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b15      	ldr	r3, [pc, #84]	; (8001848 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <MX_I2C1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_I2C1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_I2C1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <MX_I2C1_Init+0x74>)
 8001810:	f000 fd1c 	bl	800224c <HAL_I2C_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800181a:	f000 f8d7 	bl	80019cc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <MX_I2C1_Init+0x74>)
 8001822:	f001 f80b 	bl	800283c <HAL_I2CEx_ConfigAnalogFilter>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800182c:	f000 f8ce 	bl	80019cc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001830:	2100      	movs	r1, #0
 8001832:	4805      	ldr	r0, [pc, #20]	; (8001848 <MX_I2C1_Init+0x74>)
 8001834:	f001 f84d 	bl	80028d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800183e:	f000 f8c5 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000204 	.word	0x20000204
 800184c:	40005400 	.word	0x40005400
 8001850:	2000090e 	.word	0x2000090e

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186a:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <MX_GPIO_Init+0x164>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	4a52      	ldr	r2, [pc, #328]	; (80019b8 <MX_GPIO_Init+0x164>)
 8001870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001874:	6153      	str	r3, [r2, #20]
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <MX_GPIO_Init+0x164>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b4d      	ldr	r3, [pc, #308]	; (80019b8 <MX_GPIO_Init+0x164>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <MX_GPIO_Init+0x164>)
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	6153      	str	r3, [r2, #20]
 800188e:	4b4a      	ldr	r3, [pc, #296]	; (80019b8 <MX_GPIO_Init+0x164>)
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b47      	ldr	r3, [pc, #284]	; (80019b8 <MX_GPIO_Init+0x164>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	4a46      	ldr	r2, [pc, #280]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018a4:	6153      	str	r3, [r2, #20]
 80018a6:	4b44      	ldr	r3, [pc, #272]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6153      	str	r3, [r2, #20]
 80018be:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a3a      	ldr	r2, [pc, #232]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <MX_GPIO_Init+0x164>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f000 fc97 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2120      	movs	r1, #32
 80018f2:	4832      	ldr	r0, [pc, #200]	; (80019bc <MX_GPIO_Init+0x168>)
 80018f4:	f000 fc92 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	4830      	ldr	r0, [pc, #192]	; (80019c0 <MX_GPIO_Init+0x16c>)
 80018fe:	f000 fc8d 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2180      	movs	r1, #128	; 0x80
 8001906:	482f      	ldr	r0, [pc, #188]	; (80019c4 <MX_GPIO_Init+0x170>)
 8001908:	f000 fc88 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 800190c:	232a      	movs	r3, #42	; 0x2a
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fae9 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001926:	2310      	movs	r3, #16
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4823      	ldr	r0, [pc, #140]	; (80019c8 <MX_GPIO_Init+0x174>)
 800193a:	f000 fadd 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001958:	f000 face 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800195c:	2320      	movs	r3, #32
 800195e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <MX_GPIO_Init+0x168>)
 8001974:	f000 fac0 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <MX_GPIO_Init+0x16c>)
 8001990:	f000 fab2 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	4806      	ldr	r0, [pc, #24]	; (80019c4 <MX_GPIO_Init+0x170>)
 80019ac:	f000 faa4 	bl	8001ef8 <HAL_GPIO_Init>

}
 80019b0:	bf00      	nop
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	48000800 	.word	0x48000800
 80019c0:	48000400 	.word	0x48000400
 80019c4:	48001000 	.word	0x48001000
 80019c8:	48001400 	.word	0x48001400

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x44>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x44>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6193      	str	r3, [r2, #24]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x44>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x44>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x44>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x44>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a26      	ldr	r2, [pc, #152]	; (8001adc <HAL_I2C_MspInit+0xb8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d145      	bne.n	8001ad2 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6153      	str	r3, [r2, #20]
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a7c:	2312      	movs	r3, #18
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f000 fa2f 	bl	8001ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <HAL_I2C_MspInit+0xc0>)
 8001ab6:	f000 fa1f 	bl	8001ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ac4:	61d3      	str	r3, [r2, #28]
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_I2C_MspInit+0xbc>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3c:	f000 f8b4 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x50>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x16>
		heap_end = &end;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <_sbrk+0x50>)
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <_sbrk+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <_sbrk+0x50>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <_sbrk+0x50>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4413      	add	r3, r2
 8001b68:	466a      	mov	r2, sp
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d907      	bls.n	8001b7e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b6e:	f002 f99b 	bl	8003ea8 <__errno>
 8001b72:	4602      	mov	r2, r0
 8001b74:	230c      	movs	r3, #12
 8001b76:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	e006      	b.n	8001b8c <_sbrk+0x48>
	}

	heap_end += incr;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <_sbrk+0x50>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <_sbrk+0x50>)
 8001b88:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200001f8 	.word	0x200001f8
 8001b98:	20000258 	.word	0x20000258

08001b9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <SystemInit+0x28>)
 8001ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <SystemInit+0x28>)
 8001ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SystemInit+0x28>)
 8001bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c00 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bce:	e003      	b.n	8001bd8 <LoopCopyDataInit>

08001bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bd6:	3104      	adds	r1, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be0:	d3f6      	bcc.n	8001bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001be2:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001be4:	e002      	b.n	8001bec <LoopFillZerobss>

08001be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001be8:	f842 3b04 	str.w	r3, [r2], #4

08001bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <LoopForever+0x16>)
	cmp	r2, r3
 8001bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf0:	d3f9      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bf2:	f7ff ffd3 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f002 f95d 	bl	8003eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7ff fba7 	bl	800134c <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c00:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8001c04:	08006350 	.word	0x08006350
	ldr	r0, =_sdata
 8001c08:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c0c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001c10:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001c14:	20000258 	.word	0x20000258

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f92f 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fed0 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f939 	bl	8001ede <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f000 f90f 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000250 	.word	0x20000250

08001cd0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000250 	.word	0x20000250

08001ce8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf0:	f7ff ffee 	bl	8001cd0 <HAL_GetTick>
 8001cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d005      	beq.n	8001d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_Delay+0x40>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001d0e:	bf00      	nop
 8001d10:	f7ff ffde 	bl	8001cd0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8f7      	bhi.n	8001d10 <HAL_Delay+0x28>
  {
  }
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000008 	.word	0x20000008

08001d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <__NVIC_SetPriorityGrouping+0x44>)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	60d3      	str	r3, [r2, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <__NVIC_GetPriorityGrouping+0x18>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	f003 0307 	and.w	r3, r3, #7
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff47 	bl	8001d2c <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff5c 	bl	8001d74 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffb0 	bl	8001e4c <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e154      	b.n	80021b2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8146 	beq.w	80021ac <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x38>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d00b      	beq.n	8001fcc <HAL_GPIO_Init+0xd4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc0:	2b11      	cmp	r3, #17
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a0 	beq.w	80021ac <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206c:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x2d8>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <HAL_GPIO_Init+0x2d8>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <HAL_GPIO_Init+0x2d8>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002084:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <HAL_GPIO_Init+0x2dc>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ae:	d019      	beq.n	80020e4 <HAL_GPIO_Init+0x1ec>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_GPIO_Init+0x2e0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x1e8>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a48      	ldr	r2, [pc, #288]	; (80021dc <HAL_GPIO_Init+0x2e4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1e4>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a47      	ldr	r2, [pc, #284]	; (80021e0 <HAL_GPIO_Init+0x2e8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1e0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a46      	ldr	r2, [pc, #280]	; (80021e4 <HAL_GPIO_Init+0x2ec>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1dc>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e008      	b.n	80020e6 <HAL_GPIO_Init+0x1ee>
 80020d4:	2305      	movs	r3, #5
 80020d6:	e006      	b.n	80020e6 <HAL_GPIO_Init+0x1ee>
 80020d8:	2303      	movs	r3, #3
 80020da:	e004      	b.n	80020e6 <HAL_GPIO_Init+0x1ee>
 80020dc:	2302      	movs	r3, #2
 80020de:	e002      	b.n	80020e6 <HAL_GPIO_Init+0x1ee>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_GPIO_Init+0x1ee>
 80020e4:	2300      	movs	r3, #0
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	0092      	lsls	r2, r2, #2
 80020ee:	4093      	lsls	r3, r2
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020f6:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_GPIO_Init+0x2dc>)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	3302      	adds	r3, #2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	43db      	mvns	r3, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002128:	4a2f      	ldr	r2, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002152:	4a25      	ldr	r2, [pc, #148]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_GPIO_Init+0x2f0>)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	3301      	adds	r3, #1
 80021b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f47f aea3 	bne.w	8001f08 <HAL_GPIO_Init+0x10>
  }
}
 80021c2:	bf00      	nop
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	48001000 	.word	0x48001000
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e001      	b.n	800220e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002238:	e002      	b.n	8002240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e081      	b.n	8002362 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fbd6 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	; 0x24
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800229c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	e006      	b.n	80022d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d104      	bne.n	80022e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002308:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	ea42 0103 	orr.w	r1, r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	021a      	lsls	r2, r3, #8
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69d9      	ldr	r1, [r3, #28]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1a      	ldr	r2, [r3, #32]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2220      	movs	r2, #32
 800234e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	817b      	strh	r3, [r7, #10]
 800237c:	4613      	mov	r3, r2
 800237e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	f040 80da 	bne.w	8002542 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_I2C_Master_Transmit+0x30>
 8002398:	2302      	movs	r3, #2
 800239a:	e0d3      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a4:	f7ff fc94 	bl	8001cd0 <HAL_GetTick>
 80023a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2319      	movs	r3, #25
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8f0 	bl	800259c <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0be      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2221      	movs	r2, #33	; 0x21
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2210      	movs	r2, #16
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	893a      	ldrh	r2, [r7, #8]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2bff      	cmp	r3, #255	; 0xff
 80023f6:	d90e      	bls.n	8002416 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	22ff      	movs	r2, #255	; 0xff
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	b2da      	uxtb	r2, r3
 8002404:	8979      	ldrh	r1, [r7, #10]
 8002406:	4b51      	ldr	r3, [pc, #324]	; (800254c <HAL_I2C_Master_Transmit+0x1e0>)
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f9e6 	bl	80027e0 <I2C_TransferConfig>
 8002414:	e06c      	b.n	80024f0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_I2C_Master_Transmit+0x1e0>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f9d5 	bl	80027e0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002436:	e05b      	b.n	80024f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	6a39      	ldr	r1, [r7, #32]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f8ed 	bl	800261c <I2C_WaitOnTXISFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e07b      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d034      	beq.n	80024f0 <HAL_I2C_Master_Transmit+0x184>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	2b00      	cmp	r3, #0
 800248c:	d130      	bne.n	80024f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2200      	movs	r2, #0
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f87f 	bl	800259c <I2C_WaitOnFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e04d      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d90e      	bls.n	80024d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	8979      	ldrh	r1, [r7, #10]
 80024c0:	2300      	movs	r3, #0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f989 	bl	80027e0 <I2C_TransferConfig>
 80024ce:	e00f      	b.n	80024f0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	2300      	movs	r3, #0
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f978 	bl	80027e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d19e      	bne.n	8002438 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f8cc 	bl	800269c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e01a      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2220      	movs	r2, #32
 8002514:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_I2C_Master_Transmit+0x1e4>)
 8002522:	400b      	ands	r3, r1
 8002524:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e000      	b.n	8002544 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	80002000 	.word	0x80002000
 8002550:	fe00e800 	.word	0xfe00e800

08002554 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d103      	bne.n	8002572 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d007      	beq.n	8002590 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	619a      	str	r2, [r3, #24]
  }
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ac:	e022      	b.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d01e      	beq.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b6:	f7ff fb8b 	bl	8001cd0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d113      	bne.n	80025f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e00f      	b.n	8002614 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4013      	ands	r3, r2
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	429a      	cmp	r2, r3
 8002610:	d0cd      	beq.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002628:	e02c      	b.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f870 	bl	8002714 <I2C_IsAcknowledgeFailed>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e02a      	b.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d01e      	beq.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff fb43 	bl	8001cd0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d113      	bne.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	f043 0220 	orr.w	r2, r3, #32
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e007      	b.n	8002694 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b02      	cmp	r3, #2
 8002690:	d1cb      	bne.n	800262a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a8:	e028      	b.n	80026fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f830 	bl	8002714 <I2C_IsAcknowledgeFailed>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e026      	b.n	800270c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff fb07 	bl	8001cd0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e007      	b.n	800270c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b20      	cmp	r3, #32
 8002708:	d1cf      	bne.n	80026aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d151      	bne.n	80027d2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800272e:	e022      	b.n	8002776 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002736:	d01e      	beq.n	8002776 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002738:	f7ff faca 	bl	8001cd0 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d302      	bcc.n	800274e <I2C_IsAcknowledgeFailed+0x3a>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e02e      	b.n	80027d4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d1d5      	bne.n	8002730 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2210      	movs	r2, #16
 800278a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2220      	movs	r2, #32
 8002792:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f7ff fedd 	bl	8002554 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <I2C_IsAcknowledgeFailed+0xc8>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f043 0204 	orr.w	r2, r3, #4
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	4613      	mov	r3, r2
 80027f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	0d5b      	lsrs	r3, r3, #21
 80027fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <I2C_TransferConfig+0x58>)
 8002802:	430b      	orrs	r3, r1
 8002804:	43db      	mvns	r3, r3
 8002806:	ea02 0103 	and.w	r1, r2, r3
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002810:	7a7b      	ldrb	r3, [r7, #9]
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	431a      	orrs	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	03ff63ff 	.word	0x03ff63ff

0800283c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d138      	bne.n	80028c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800285c:	2302      	movs	r3, #2
 800285e:	e032      	b.n	80028c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800288e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d139      	bne.n	800295c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e033      	b.n	800295e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2224      	movs	r2, #36	; 0x24
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0201 	bic.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002972:	af00      	add	r7, sp, #0
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f000 bef4 	b.w	800376e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002986:	1d3b      	adds	r3, r7, #4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 816a 	beq.w	8002c6a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002996:	4bb3      	ldr	r3, [pc, #716]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d00c      	beq.n	80029bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029a2:	4bb0      	ldr	r3, [pc, #704]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d159      	bne.n	8002a62 <HAL_RCC_OscConfig+0xf6>
 80029ae:	4bad      	ldr	r3, [pc, #692]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ba:	d152      	bne.n	8002a62 <HAL_RCC_OscConfig+0xf6>
 80029bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80029c8:	fa93 f3a3 	rbit	r3, r3
 80029cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x82>
 80029e8:	4b9e      	ldr	r3, [pc, #632]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0xae>
 80029ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a0a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a0e:	fa93 f3a3 	rbit	r3, r3
 8002a12:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a16:	4b93      	ldr	r3, [pc, #588]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a26:	fa92 f2a2 	rbit	r2, r2
 8002a2a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a2e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a32:	fab2 f282 	clz	r2, r2
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f042 0220 	orr.w	r2, r2, #32
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	f002 021f 	and.w	r2, r2, #31
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 810c 	beq.w	8002c68 <HAL_RCC_OscConfig+0x2fc>
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8106 	bne.w	8002c68 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f000 be86 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x110>
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7c      	ldr	r2, [pc, #496]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e030      	b.n	8002ade <HAL_RCC_OscConfig+0x172>
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x134>
 8002a86:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a76      	ldr	r2, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01e      	b.n	8002ade <HAL_RCC_OscConfig+0x172>
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x15a>
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a6c      	ldr	r2, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a69      	ldr	r2, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e00b      	b.n	8002ade <HAL_RCC_OscConfig+0x172>
 8002ac6:	4b67      	ldr	r3, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a66      	ldr	r2, [pc, #408]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a63      	ldr	r2, [pc, #396]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ad8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	495d      	ldr	r1, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d059      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff f8e8 	bl	8001cd0 <HAL_GetTick>
 8002b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b06:	f7ff f8e3 	bl	8001cd0 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d902      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	f000 be29 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
 8002b1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b20:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b30:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_OscConfig+0x1e2>
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	e015      	b.n	8002b7a <HAL_RCC_OscConfig+0x20e>
 8002b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b52:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b66:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002b6a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002b76:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002b82:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002b8e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0220 	orr.w	r2, r2, #32
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ab      	beq.n	8002b06 <HAL_RCC_OscConfig+0x19a>
 8002bae:	e05c      	b.n	8002c6a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f88e 	bl	8001cd0 <HAL_GetTick>
 8002bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb8:	e00a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bba:	f7ff f889 	bl	8001cd0 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d902      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	f000 bdcf 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
 8002bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002be4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0x296>
 8002bfc:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x2c2>
 8002c02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c06:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c1a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c1e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCC_OscConfig+0x2f8>)
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c32:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c36:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c3a:	fa92 f2a2 	rbit	r2, r2
 8002c3e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c42:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c46:	fab2 f282 	clz	r2, r2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f042 0220 	orr.w	r2, r2, #32
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ab      	bne.n	8002bba <HAL_RCC_OscConfig+0x24e>
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_OscConfig+0x2fe>
 8002c64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 816f 	beq.w	8002f58 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c7a:	4bd0      	ldr	r3, [pc, #832]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c86:	4bcd      	ldr	r3, [pc, #820]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d16c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x400>
 8002c92:	4bca      	ldr	r3, [pc, #808]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d166      	bne.n	8002d6c <HAL_RCC_OscConfig+0x400>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ca8:	fa93 f3a3 	rbit	r3, r3
 8002cac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002cb0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_OscConfig+0x362>
 8002cc8:	4bbc      	ldr	r3, [pc, #752]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	e013      	b.n	8002cf6 <HAL_RCC_OscConfig+0x38a>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002cf2:	4bb2      	ldr	r3, [pc, #712]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002cfc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d00:	fa92 f2a2 	rbit	r2, r2
 8002d04:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d08:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f000 bd1b 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4ba0      	ldr	r3, [pc, #640]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	21f8      	movs	r1, #248	; 0xf8
 8002d48:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002d50:	fa91 f1a1 	rbit	r1, r1
 8002d54:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002d58:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002d5c:	fab1 f181 	clz	r1, r1
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	408b      	lsls	r3, r1
 8002d64:	4995      	ldr	r1, [pc, #596]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e0f5      	b.n	8002f58 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8085 	beq.w	8002e82 <HAL_RCC_OscConfig+0x516>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002d8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2301      	movs	r3, #1
 8002da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe ff94 	bl	8001cd0 <HAL_GetTick>
 8002da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dae:	f7fe ff8f 	bl	8001cd0 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d902      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	f000 bcd5 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002dd6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d102      	bne.n	8002df4 <HAL_RCC_OscConfig+0x488>
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	e013      	b.n	8002e1c <HAL_RCC_OscConfig+0x4b0>
 8002df4:	2302      	movs	r3, #2
 8002df6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e0c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e22:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e26:	fa92 f2a2 	rbit	r2, r2
 8002e2a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e2e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e32:	fab2 f282 	clz	r2, r2
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f042 0220 	orr.w	r2, r2, #32
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f002 021f 	and.w	r2, r2, #31
 8002e42:	2101      	movs	r1, #1
 8002e44:	fa01 f202 	lsl.w	r2, r1, r2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0af      	beq.n	8002dae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b5b      	ldr	r3, [pc, #364]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	21f8      	movs	r1, #248	; 0xf8
 8002e5e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002e66:	fa91 f1a1 	rbit	r1, r1
 8002e6a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002e6e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002e72:	fab1 f181 	clz	r1, r1
 8002e76:	b2c9      	uxtb	r1, r1
 8002e78:	408b      	lsls	r3, r1
 8002e7a:	4950      	ldr	r1, [pc, #320]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
 8002e80:	e06a      	b.n	8002f58 <HAL_RCC_OscConfig+0x5ec>
 8002e82:	2301      	movs	r3, #1
 8002e84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002e94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ea2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe ff0f 	bl	8001cd0 <HAL_GetTick>
 8002eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb8:	f7fe ff0a 	bl	8001cd0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d902      	bls.n	8002ece <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f000 bc50 	b.w	800376e <HAL_RCC_OscConfig+0xe02>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x592>
 8002ef8:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	e013      	b.n	8002f26 <HAL_RCC_OscConfig+0x5ba>
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f22:	4b26      	ldr	r3, [pc, #152]	; (8002fbc <HAL_RCC_OscConfig+0x650>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2202      	movs	r2, #2
 8002f28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1af      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80da 	beq.w	800311c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d069      	beq.n	8003046 <HAL_RCC_OscConfig+0x6da>
 8002f72:	2301      	movs	r3, #1
 8002f74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f88:	fab3 f383 	clz	r3, r3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_OscConfig+0x654>)
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	461a      	mov	r2, r3
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fe98 	bl	8001cd0 <HAL_GetTick>
 8002fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fe93 	bl	8001cd0 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d906      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e3d9      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	10908120 	.word	0x10908120
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002fd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fda:	2202      	movs	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	fa93 f2a3 	rbit	r2, r3
 8002fe8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	fa93 f2a3 	rbit	r2, r3
 8003000:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003004:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4ba5      	ldr	r3, [pc, #660]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800300a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800300e:	2102      	movs	r1, #2
 8003010:	6019      	str	r1, [r3, #0]
 8003012:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f1a3 	rbit	r1, r3
 800301c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003020:	6019      	str	r1, [r3, #0]
  return result;
 8003022:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0b0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x63a>
 8003044:	e06a      	b.n	800311c <HAL_RCC_OscConfig+0x7b0>
 8003046:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800305c:	601a      	str	r2, [r3, #0]
  return result;
 800305e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003062:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x934>)
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003078:	f7fe fe2a 	bl	8001cd0 <HAL_GetTick>
 800307c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e009      	b.n	8003096 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe fe25 	bl	8001cd0 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e36b      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 8003096:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800309a:	2202      	movs	r2, #2
 800309c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	fa93 f2a3 	rbit	r2, r3
 80030a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030ca:	2202      	movs	r2, #2
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fa93 f2a3 	rbit	r2, r3
 80030d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030de:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80030e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030e6:	2102      	movs	r1, #2
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	fa93 f1a3 	rbit	r1, r3
 80030f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030f8:	6019      	str	r1, [r3, #0]
  return result;
 80030fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	4013      	ands	r3, r2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1b2      	bne.n	8003082 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8158 	beq.w	80033dc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b5a      	ldr	r3, [pc, #360]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d112      	bne.n	8003164 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a56      	ldr	r2, [pc, #344]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <HAL_RCC_OscConfig+0x930>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f107 0308 	add.w	r3, r7, #8
 800315c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	4b4f      	ldr	r3, [pc, #316]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11a      	bne.n	80031a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317c:	f7fe fda8 	bl	8001cd0 <HAL_GetTick>
 8003180:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e009      	b.n	800319a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fda3 	bl	8001cd0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e2e9      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <HAL_RCC_OscConfig+0x938>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ef      	beq.n	8003186 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x852>
 80031b0:	4b3a      	ldr	r3, [pc, #232]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a39      	ldr	r2, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6213      	str	r3, [r2, #32]
 80031bc:	e02f      	b.n	800321e <HAL_RCC_OscConfig+0x8b2>
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x876>
 80031c8:	4b34      	ldr	r3, [pc, #208]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	4a33      	ldr	r2, [pc, #204]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031ce:	f023 0301 	bic.w	r3, r3, #1
 80031d2:	6213      	str	r3, [r2, #32]
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031da:	f023 0304 	bic.w	r3, r3, #4
 80031de:	6213      	str	r3, [r2, #32]
 80031e0:	e01d      	b.n	800321e <HAL_RCC_OscConfig+0x8b2>
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d10c      	bne.n	8003206 <HAL_RCC_OscConfig+0x89a>
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031f2:	f043 0304 	orr.w	r3, r3, #4
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_RCC_OscConfig+0x930>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	e00b      	b.n	800321e <HAL_RCC_OscConfig+0x8b2>
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_RCC_OscConfig+0x930>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321e:	1d3b      	adds	r3, r7, #4
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d06b      	beq.n	8003300 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe fd52 	bl	8001cd0 <HAL_GetTick>
 800322c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00b      	b.n	800324a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fd4d 	bl	8001cd0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e291      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 800324a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800324e:	2202      	movs	r2, #2
 8003250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003252:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	fa93 f2a3 	rbit	r2, r3
 800325c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003266:	2202      	movs	r2, #2
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800327e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	fab3 f383 	clz	r3, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d109      	bne.n	80032a8 <HAL_RCC_OscConfig+0x93c>
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <HAL_RCC_OscConfig+0x930>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	e014      	b.n	80032c4 <HAL_RCC_OscConfig+0x958>
 800329a:	bf00      	nop
 800329c:	40021000 	.word	0x40021000
 80032a0:	10908120 	.word	0x10908120
 80032a4:	40007000 	.word	0x40007000
 80032a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032ac:	2202      	movs	r2, #2
 80032ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	fa93 f2a3 	rbit	r2, r3
 80032ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	4bbb      	ldr	r3, [pc, #748]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032c8:	2102      	movs	r1, #2
 80032ca:	6011      	str	r1, [r2, #0]
 80032cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	fa92 f1a2 	rbit	r1, r2
 80032d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032da:	6011      	str	r1, [r2, #0]
  return result;
 80032dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	f002 021f 	and.w	r2, r2, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f202 	lsl.w	r2, r1, r2
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d099      	beq.n	8003232 <HAL_RCC_OscConfig+0x8c6>
 80032fe:	e063      	b.n	80033c8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7fe fce6 	bl	8001cd0 <HAL_GetTick>
 8003304:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00b      	b.n	8003322 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fce1 	bl	8001cd0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e225      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 8003322:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800333e:	2202      	movs	r2, #2
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fa93 f2a3 	rbit	r2, r3
 800334c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003350:	601a      	str	r2, [r3, #0]
  return result;
 8003352:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003356:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d102      	bne.n	8003372 <HAL_RCC_OscConfig+0xa06>
 800336c:	4b90      	ldr	r3, [pc, #576]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	e00d      	b.n	800338e <HAL_RCC_OscConfig+0xa22>
 8003372:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003376:	2202      	movs	r2, #2
 8003378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f2a3 	rbit	r2, r3
 8003384:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003392:	2102      	movs	r1, #2
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	fa92 f1a2 	rbit	r1, r2
 80033a0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033a4:	6011      	str	r1, [r2, #0]
  return result;
 80033a6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1a0      	bne.n	800330a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033c8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b77      	ldr	r3, [pc, #476]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	4a76      	ldr	r2, [pc, #472]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033da:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 81c2 	beq.w	800376c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e8:	4b71      	ldr	r3, [pc, #452]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	f000 819c 	beq.w	800372e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f6:	1d3b      	adds	r3, r7, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	f040 8114 	bne.w	800362a <HAL_RCC_OscConfig+0xcbe>
 8003402:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003406:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800340a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800341a:	601a      	str	r2, [r3, #0]
  return result;
 800341c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003420:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800342c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	461a      	mov	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fc4a 	bl	8001cd0 <HAL_GetTick>
 800343c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	e009      	b.n	8003456 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe fc45 	bl	8001cd0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e18b      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 8003456:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800345a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800345e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	fa93 f2a3 	rbit	r2, r3
 800346a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800346e:	601a      	str	r2, [r3, #0]
  return result;
 8003470:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003474:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_RCC_OscConfig+0xb24>
 800348a:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e01b      	b.n	80034c8 <HAL_RCC_OscConfig+0xb5c>
 8003490:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fa93 f2a3 	rbit	r2, r3
 80034a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	fa93 f2a3 	rbit	r2, r3
 80034be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	4b3a      	ldr	r3, [pc, #232]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034d0:	6011      	str	r1, [r2, #0]
 80034d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	fa92 f1a2 	rbit	r1, r2
 80034dc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034e0:	6011      	str	r1, [r2, #0]
  return result;
 80034e2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	fab2 f282 	clz	r2, r2
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f042 0220 	orr.w	r2, r2, #32
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	f002 021f 	and.w	r2, r2, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f202 	lsl.w	r2, r1, r2
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d19e      	bne.n	8003442 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003504:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	430b      	orrs	r3, r1
 800351a:	4925      	ldr	r1, [pc, #148]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
 8003520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003538:	601a      	str	r2, [r3, #0]
  return result;
 800353a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800353e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800354a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	461a      	mov	r2, r3
 8003552:	2301      	movs	r3, #1
 8003554:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003556:	f7fe fbbb 	bl	8001cd0 <HAL_GetTick>
 800355a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800355e:	e009      	b.n	8003574 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fbb6 	bl	8001cd0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e0fc      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 8003574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	fa93 f2a3 	rbit	r2, r3
 8003588:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800358c:	601a      	str	r2, [r3, #0]
  return result;
 800358e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003592:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003594:	fab3 f383 	clz	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <HAL_RCC_OscConfig+0xc48>
 80035a8:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <HAL_RCC_OscConfig+0xc44>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	e01e      	b.n	80035ec <HAL_RCC_OscConfig+0xc80>
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000
 80035b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa93 f2a3 	rbit	r2, r3
 80035c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	fa93 f2a3 	rbit	r2, r3
 80035e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0xe0c>)
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035f4:	6011      	str	r1, [r2, #0]
 80035f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	fa92 f1a2 	rbit	r1, r2
 8003600:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003604:	6011      	str	r1, [r2, #0]
  return result;
 8003606:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fab2 f282 	clz	r2, r2
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	f042 0220 	orr.w	r2, r2, #32
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	f002 021f 	and.w	r2, r2, #31
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d09b      	beq.n	8003560 <HAL_RCC_OscConfig+0xbf4>
 8003628:	e0a0      	b.n	800376c <HAL_RCC_OscConfig+0xe00>
 800362a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003632:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003648:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fe fb36 	bl	8001cd0 <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e009      	b.n	800367e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fe fb31 	bl	8001cd0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e077      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
 800367e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	601a      	str	r2, [r3, #0]
  return result;
 8003698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0xd4c>
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <HAL_RCC_OscConfig+0xe0c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e01b      	b.n	80036f0 <HAL_RCC_OscConfig+0xd84>
 80036b8:	f107 0320 	add.w	r3, r7, #32
 80036bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f107 0320 	add.w	r3, r7, #32
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f107 031c 	add.w	r3, r7, #28
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	f107 0318 	add.w	r3, r7, #24
 80036d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f107 0318 	add.w	r3, r7, #24
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fa93 f2a3 	rbit	r2, r3
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	4b22      	ldr	r3, [pc, #136]	; (8003778 <HAL_RCC_OscConfig+0xe0c>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f107 0210 	add.w	r2, r7, #16
 80036f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	f107 0210 	add.w	r2, r7, #16
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fa92 f1a2 	rbit	r1, r2
 8003704:	f107 020c 	add.w	r2, r7, #12
 8003708:	6011      	str	r1, [r2, #0]
  return result;
 800370a:	f107 020c 	add.w	r2, r7, #12
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d19e      	bne.n	800366a <HAL_RCC_OscConfig+0xcfe>
 800372c:	e01e      	b.n	800376c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e018      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCC_OscConfig+0xe0c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003744:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800374c:	1d3b      	adds	r3, r7, #4
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	429a      	cmp	r2, r3
 8003754:	d108      	bne.n	8003768 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003756:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800375a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b09e      	sub	sp, #120	; 0x78
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e162      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b90      	ldr	r3, [pc, #576]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b8d      	ldr	r3, [pc, #564]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	498b      	ldr	r1, [pc, #556]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b89      	ldr	r3, [pc, #548]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e14a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037d0:	4b82      	ldr	r3, [pc, #520]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	497f      	ldr	r1, [pc, #508]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80dc 	beq.w	80039a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d13c      	bne.n	8003872 <HAL_RCC_ClockConfig+0xf6>
 80037f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <HAL_RCC_ClockConfig+0xa6>
 800381c:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	e00f      	b.n	8003842 <HAL_RCC_ClockConfig+0xc6>
 8003822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	667b      	str	r3, [r7, #100]	; 0x64
 8003830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 8003836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003846:	65ba      	str	r2, [r7, #88]	; 0x58
 8003848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d17b      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0f3      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d13c      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x178>
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	fab3 f383 	clz	r3, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x128>
 800389e:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	e00f      	b.n	80038c4 <HAL_RCC_ClockConfig+0x148>
 80038a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
 80038b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038cc:	fa92 f2a2 	rbit	r2, r2
 80038d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038d4:	fab2 f282 	clz	r2, r2
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	f042 0220 	orr.w	r2, r2, #32
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	f002 021f 	and.w	r2, r2, #31
 80038e4:	2101      	movs	r1, #1
 80038e6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d13a      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b2      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80038f4:	2302      	movs	r3, #2
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_ClockConfig+0x1a0>
 8003916:	4b31      	ldr	r3, [pc, #196]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e00d      	b.n	8003938 <HAL_RCC_ClockConfig+0x1bc>
 800391c:	2302      	movs	r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
 8003928:	2302      	movs	r3, #2
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	61ba      	str	r2, [r7, #24]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	fa92 f2a2 	rbit	r2, r2
 8003942:	617a      	str	r2, [r7, #20]
  return result;
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	fab2 f282 	clz	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f042 0220 	orr.w	r2, r2, #32
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f002 021f 	and.w	r2, r2, #31
 8003956:	2101      	movs	r1, #1
 8003958:	fa01 f202 	lsl.w	r2, r1, r2
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e079      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	491a      	ldr	r1, [pc, #104]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe f9aa 	bl	8001cd0 <HAL_GetTick>
 800397c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe f9a6 	bl	8001cd0 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e061      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_RCC_ClockConfig+0x260>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d214      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4906      	ldr	r1, [pc, #24]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <HAL_RCC_ClockConfig+0x25c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e040      	b.n	8003a5a <HAL_RCC_ClockConfig+0x2de>
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	491a      	ldr	r1, [pc, #104]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a1e:	f000 f829 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <HAL_RCC_ClockConfig+0x2e8>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	22f0      	movs	r2, #240	; 0xf0
 8003a2e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	fa92 f2a2 	rbit	r2, r2
 8003a36:	60fa      	str	r2, [r7, #12]
  return result;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	40d3      	lsrs	r3, r2
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x2ec>)
 8003a44:	5cd3      	ldrb	r3, [r2, r3]
 8003a46:	fa21 f303 	lsr.w	r3, r1, r3
 8003a4a:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_RCC_ClockConfig+0x2f0>)
 8003a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_RCC_ClockConfig+0x2f4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe f8f8 	bl	8001c48 <HAL_InitTick>
  
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3778      	adds	r7, #120	; 0x78
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0800605c 	.word	0x0800605c
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b08b      	sub	sp, #44	; 0x2c
 8003a78:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	2300      	movs	r3, #0
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x30>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x36>
 8003aa2:	e03c      	b.n	8003b1e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003aa4:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aa6:	623b      	str	r3, [r7, #32]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003ab0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003ab4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	fa92 f2a2 	rbit	r2, r2
 8003abc:	607a      	str	r2, [r7, #4]
  return result;
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	fab2 f282 	clz	r2, r2
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	40d3      	lsrs	r3, r2
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aca:	5cd3      	ldrb	r3, [r2, r3]
 8003acc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ace:	4b19      	ldr	r3, [pc, #100]	; (8003b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	220f      	movs	r2, #15
 8003ad8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	fa92 f2a2 	rbit	r2, r2
 8003ae0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	fab2 f282 	clz	r2, r2
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	40d3      	lsrs	r3, r2
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003afc:	4a0e      	ldr	r2, [pc, #56]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e004      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	623b      	str	r3, [r7, #32]
      break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b20:	623b      	str	r3, [r7, #32]
      break;
 8003b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	372c      	adds	r7, #44	; 0x2c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	007a1200 	.word	0x007a1200
 8003b3c:	0800606c 	.word	0x0800606c
 8003b40:	0800607c 	.word	0x0800607c
 8003b44:	003d0900 	.word	0x003d0900

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b092      	sub	sp, #72	; 0x48
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80d7 	beq.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6c:	4b4e      	ldr	r3, [pc, #312]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b82:	61d3      	str	r3, [r2, #28]
 8003b84:	4b48      	ldr	r3, [pc, #288]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b96:	4b45      	ldr	r3, [pc, #276]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ba2:	4b42      	ldr	r3, [pc, #264]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a41      	ldr	r2, [pc, #260]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bae:	f7fe f88f 	bl	8001cd0 <HAL_GetTick>
 8003bb2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb6:	f7fe f88b 	bl	8001cd0 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b64      	cmp	r3, #100	; 0x64
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e169      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	4b38      	ldr	r3, [pc, #224]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bd4:	4b34      	ldr	r3, [pc, #208]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8084 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d07c      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2301      	movs	r3, #1
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c46:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d04b      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fe f83b 	bl	8001cd0 <HAL_GetTick>
 8003c5a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe f837 	bl	8001cd0 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e113      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003c74:	2302      	movs	r3, #2
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	2302      	movs	r3, #2
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d108      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ca2:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	e00d      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
 8003cb0:	10908100 	.word	0x10908100
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	4b78      	ldr	r3, [pc, #480]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	613a      	str	r2, [r7, #16]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	fa92 f2a2 	rbit	r2, r2
 8003cce:	60fa      	str	r2, [r7, #12]
  return result;
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	fab2 f282 	clz	r2, r2
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	f002 021f 	and.w	r2, r2, #31
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0b7      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cee:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	496a      	ldr	r1, [pc, #424]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d20:	4b60      	ldr	r3, [pc, #384]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f023 0203 	bic.w	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	495d      	ldr	r1, [pc, #372]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d3e:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	4956      	ldr	r1, [pc, #344]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d5c:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	494e      	ldr	r1, [pc, #312]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f023 0210 	bic.w	r2, r3, #16
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4947      	ldr	r1, [pc, #284]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	493f      	ldr	r1, [pc, #252]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db6:	4b3b      	ldr	r3, [pc, #236]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f023 0220 	bic.w	r2, r3, #32
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4938      	ldr	r1, [pc, #224]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dd4:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	4930      	ldr	r1, [pc, #192]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	4929      	ldr	r1, [pc, #164]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e10:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	4912      	ldr	r1, [pc, #72]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	490b      	ldr	r1, [pc, #44]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4903      	ldr	r1, [pc, #12]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3748      	adds	r7, #72	; 0x48
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <__errno>:
 8003ea8:	4b01      	ldr	r3, [pc, #4]	; (8003eb0 <__errno+0x8>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <__libc_init_array>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	4e0d      	ldr	r6, [pc, #52]	; (8003eec <__libc_init_array+0x38>)
 8003eb8:	4c0d      	ldr	r4, [pc, #52]	; (8003ef0 <__libc_init_array+0x3c>)
 8003eba:	1ba4      	subs	r4, r4, r6
 8003ebc:	10a4      	asrs	r4, r4, #2
 8003ebe:	2500      	movs	r5, #0
 8003ec0:	42a5      	cmp	r5, r4
 8003ec2:	d109      	bne.n	8003ed8 <__libc_init_array+0x24>
 8003ec4:	4e0b      	ldr	r6, [pc, #44]	; (8003ef4 <__libc_init_array+0x40>)
 8003ec6:	4c0c      	ldr	r4, [pc, #48]	; (8003ef8 <__libc_init_array+0x44>)
 8003ec8:	f002 f882 	bl	8005fd0 <_init>
 8003ecc:	1ba4      	subs	r4, r4, r6
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	2500      	movs	r5, #0
 8003ed2:	42a5      	cmp	r5, r4
 8003ed4:	d105      	bne.n	8003ee2 <__libc_init_array+0x2e>
 8003ed6:	bd70      	pop	{r4, r5, r6, pc}
 8003ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003edc:	4798      	blx	r3
 8003ede:	3501      	adds	r5, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__libc_init_array+0xc>
 8003ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ee6:	4798      	blx	r3
 8003ee8:	3501      	adds	r5, #1
 8003eea:	e7f2      	b.n	8003ed2 <__libc_init_array+0x1e>
 8003eec:	08006348 	.word	0x08006348
 8003ef0:	08006348 	.word	0x08006348
 8003ef4:	08006348 	.word	0x08006348
 8003ef8:	0800634c 	.word	0x0800634c

08003efc <__locale_ctype_ptr>:
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <__locale_ctype_ptr+0x14>)
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <__locale_ctype_ptr+0x18>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf08      	it	eq
 8003f08:	4613      	moveq	r3, r2
 8003f0a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003f0e:	4770      	bx	lr
 8003f10:	2000000c 	.word	0x2000000c
 8003f14:	20000070 	.word	0x20000070

08003f18 <__ascii_mbtowc>:
 8003f18:	b082      	sub	sp, #8
 8003f1a:	b901      	cbnz	r1, 8003f1e <__ascii_mbtowc+0x6>
 8003f1c:	a901      	add	r1, sp, #4
 8003f1e:	b142      	cbz	r2, 8003f32 <__ascii_mbtowc+0x1a>
 8003f20:	b14b      	cbz	r3, 8003f36 <__ascii_mbtowc+0x1e>
 8003f22:	7813      	ldrb	r3, [r2, #0]
 8003f24:	600b      	str	r3, [r1, #0]
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	1c10      	adds	r0, r2, #0
 8003f2a:	bf18      	it	ne
 8003f2c:	2001      	movne	r0, #1
 8003f2e:	b002      	add	sp, #8
 8003f30:	4770      	bx	lr
 8003f32:	4610      	mov	r0, r2
 8003f34:	e7fb      	b.n	8003f2e <__ascii_mbtowc+0x16>
 8003f36:	f06f 0001 	mvn.w	r0, #1
 8003f3a:	e7f8      	b.n	8003f2e <__ascii_mbtowc+0x16>

08003f3c <memcpy>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	1e43      	subs	r3, r0, #1
 8003f40:	440a      	add	r2, r1
 8003f42:	4291      	cmp	r1, r2
 8003f44:	d100      	bne.n	8003f48 <memcpy+0xc>
 8003f46:	bd10      	pop	{r4, pc}
 8003f48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f50:	e7f7      	b.n	8003f42 <memcpy+0x6>

08003f52 <memset>:
 8003f52:	4402      	add	r2, r0
 8003f54:	4603      	mov	r3, r0
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d100      	bne.n	8003f5c <memset+0xa>
 8003f5a:	4770      	bx	lr
 8003f5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f60:	e7f9      	b.n	8003f56 <memset+0x4>
	...

08003f64 <_free_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4605      	mov	r5, r0
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	d045      	beq.n	8003ff8 <_free_r+0x94>
 8003f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f70:	1f0c      	subs	r4, r1, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	bfb8      	it	lt
 8003f76:	18e4      	addlt	r4, r4, r3
 8003f78:	f001 fba4 	bl	80056c4 <__malloc_lock>
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <_free_r+0x98>)
 8003f7e:	6813      	ldr	r3, [r2, #0]
 8003f80:	4610      	mov	r0, r2
 8003f82:	b933      	cbnz	r3, 8003f92 <_free_r+0x2e>
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	6014      	str	r4, [r2, #0]
 8003f88:	4628      	mov	r0, r5
 8003f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f8e:	f001 bb9a 	b.w	80056c6 <__malloc_unlock>
 8003f92:	42a3      	cmp	r3, r4
 8003f94:	d90c      	bls.n	8003fb0 <_free_r+0x4c>
 8003f96:	6821      	ldr	r1, [r4, #0]
 8003f98:	1862      	adds	r2, r4, r1
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	bf04      	itt	eq
 8003f9e:	681a      	ldreq	r2, [r3, #0]
 8003fa0:	685b      	ldreq	r3, [r3, #4]
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	bf04      	itt	eq
 8003fa6:	1852      	addeq	r2, r2, r1
 8003fa8:	6022      	streq	r2, [r4, #0]
 8003faa:	6004      	str	r4, [r0, #0]
 8003fac:	e7ec      	b.n	8003f88 <_free_r+0x24>
 8003fae:	4613      	mov	r3, r2
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	b10a      	cbz	r2, 8003fb8 <_free_r+0x54>
 8003fb4:	42a2      	cmp	r2, r4
 8003fb6:	d9fa      	bls.n	8003fae <_free_r+0x4a>
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	1858      	adds	r0, r3, r1
 8003fbc:	42a0      	cmp	r0, r4
 8003fbe:	d10b      	bne.n	8003fd8 <_free_r+0x74>
 8003fc0:	6820      	ldr	r0, [r4, #0]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	1858      	adds	r0, r3, r1
 8003fc6:	4282      	cmp	r2, r0
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	d1dd      	bne.n	8003f88 <_free_r+0x24>
 8003fcc:	6810      	ldr	r0, [r2, #0]
 8003fce:	6852      	ldr	r2, [r2, #4]
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	4401      	add	r1, r0
 8003fd4:	6019      	str	r1, [r3, #0]
 8003fd6:	e7d7      	b.n	8003f88 <_free_r+0x24>
 8003fd8:	d902      	bls.n	8003fe0 <_free_r+0x7c>
 8003fda:	230c      	movs	r3, #12
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	e7d3      	b.n	8003f88 <_free_r+0x24>
 8003fe0:	6820      	ldr	r0, [r4, #0]
 8003fe2:	1821      	adds	r1, r4, r0
 8003fe4:	428a      	cmp	r2, r1
 8003fe6:	bf04      	itt	eq
 8003fe8:	6811      	ldreq	r1, [r2, #0]
 8003fea:	6852      	ldreq	r2, [r2, #4]
 8003fec:	6062      	str	r2, [r4, #4]
 8003fee:	bf04      	itt	eq
 8003ff0:	1809      	addeq	r1, r1, r0
 8003ff2:	6021      	streq	r1, [r4, #0]
 8003ff4:	605c      	str	r4, [r3, #4]
 8003ff6:	e7c7      	b.n	8003f88 <_free_r+0x24>
 8003ff8:	bd38      	pop	{r3, r4, r5, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200001fc 	.word	0x200001fc

08004000 <_malloc_r>:
 8004000:	b570      	push	{r4, r5, r6, lr}
 8004002:	1ccd      	adds	r5, r1, #3
 8004004:	f025 0503 	bic.w	r5, r5, #3
 8004008:	3508      	adds	r5, #8
 800400a:	2d0c      	cmp	r5, #12
 800400c:	bf38      	it	cc
 800400e:	250c      	movcc	r5, #12
 8004010:	2d00      	cmp	r5, #0
 8004012:	4606      	mov	r6, r0
 8004014:	db01      	blt.n	800401a <_malloc_r+0x1a>
 8004016:	42a9      	cmp	r1, r5
 8004018:	d903      	bls.n	8004022 <_malloc_r+0x22>
 800401a:	230c      	movs	r3, #12
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	2000      	movs	r0, #0
 8004020:	bd70      	pop	{r4, r5, r6, pc}
 8004022:	f001 fb4f 	bl	80056c4 <__malloc_lock>
 8004026:	4a21      	ldr	r2, [pc, #132]	; (80040ac <_malloc_r+0xac>)
 8004028:	6814      	ldr	r4, [r2, #0]
 800402a:	4621      	mov	r1, r4
 800402c:	b991      	cbnz	r1, 8004054 <_malloc_r+0x54>
 800402e:	4c20      	ldr	r4, [pc, #128]	; (80040b0 <_malloc_r+0xb0>)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	b91b      	cbnz	r3, 800403c <_malloc_r+0x3c>
 8004034:	4630      	mov	r0, r6
 8004036:	f000 fc99 	bl	800496c <_sbrk_r>
 800403a:	6020      	str	r0, [r4, #0]
 800403c:	4629      	mov	r1, r5
 800403e:	4630      	mov	r0, r6
 8004040:	f000 fc94 	bl	800496c <_sbrk_r>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d124      	bne.n	8004092 <_malloc_r+0x92>
 8004048:	230c      	movs	r3, #12
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	4630      	mov	r0, r6
 800404e:	f001 fb3a 	bl	80056c6 <__malloc_unlock>
 8004052:	e7e4      	b.n	800401e <_malloc_r+0x1e>
 8004054:	680b      	ldr	r3, [r1, #0]
 8004056:	1b5b      	subs	r3, r3, r5
 8004058:	d418      	bmi.n	800408c <_malloc_r+0x8c>
 800405a:	2b0b      	cmp	r3, #11
 800405c:	d90f      	bls.n	800407e <_malloc_r+0x7e>
 800405e:	600b      	str	r3, [r1, #0]
 8004060:	50cd      	str	r5, [r1, r3]
 8004062:	18cc      	adds	r4, r1, r3
 8004064:	4630      	mov	r0, r6
 8004066:	f001 fb2e 	bl	80056c6 <__malloc_unlock>
 800406a:	f104 000b 	add.w	r0, r4, #11
 800406e:	1d23      	adds	r3, r4, #4
 8004070:	f020 0007 	bic.w	r0, r0, #7
 8004074:	1ac3      	subs	r3, r0, r3
 8004076:	d0d3      	beq.n	8004020 <_malloc_r+0x20>
 8004078:	425a      	negs	r2, r3
 800407a:	50e2      	str	r2, [r4, r3]
 800407c:	e7d0      	b.n	8004020 <_malloc_r+0x20>
 800407e:	428c      	cmp	r4, r1
 8004080:	684b      	ldr	r3, [r1, #4]
 8004082:	bf16      	itet	ne
 8004084:	6063      	strne	r3, [r4, #4]
 8004086:	6013      	streq	r3, [r2, #0]
 8004088:	460c      	movne	r4, r1
 800408a:	e7eb      	b.n	8004064 <_malloc_r+0x64>
 800408c:	460c      	mov	r4, r1
 800408e:	6849      	ldr	r1, [r1, #4]
 8004090:	e7cc      	b.n	800402c <_malloc_r+0x2c>
 8004092:	1cc4      	adds	r4, r0, #3
 8004094:	f024 0403 	bic.w	r4, r4, #3
 8004098:	42a0      	cmp	r0, r4
 800409a:	d005      	beq.n	80040a8 <_malloc_r+0xa8>
 800409c:	1a21      	subs	r1, r4, r0
 800409e:	4630      	mov	r0, r6
 80040a0:	f000 fc64 	bl	800496c <_sbrk_r>
 80040a4:	3001      	adds	r0, #1
 80040a6:	d0cf      	beq.n	8004048 <_malloc_r+0x48>
 80040a8:	6025      	str	r5, [r4, #0]
 80040aa:	e7db      	b.n	8004064 <_malloc_r+0x64>
 80040ac:	200001fc 	.word	0x200001fc
 80040b0:	20000200 	.word	0x20000200

080040b4 <__cvt>:
 80040b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	ec55 4b10 	vmov	r4, r5, d0
 80040bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80040be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	460e      	mov	r6, r1
 80040c6:	4691      	mov	r9, r2
 80040c8:	4619      	mov	r1, r3
 80040ca:	bfb8      	it	lt
 80040cc:	4622      	movlt	r2, r4
 80040ce:	462b      	mov	r3, r5
 80040d0:	f027 0720 	bic.w	r7, r7, #32
 80040d4:	bfbb      	ittet	lt
 80040d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040da:	461d      	movlt	r5, r3
 80040dc:	2300      	movge	r3, #0
 80040de:	232d      	movlt	r3, #45	; 0x2d
 80040e0:	bfb8      	it	lt
 80040e2:	4614      	movlt	r4, r2
 80040e4:	2f46      	cmp	r7, #70	; 0x46
 80040e6:	700b      	strb	r3, [r1, #0]
 80040e8:	d004      	beq.n	80040f4 <__cvt+0x40>
 80040ea:	2f45      	cmp	r7, #69	; 0x45
 80040ec:	d100      	bne.n	80040f0 <__cvt+0x3c>
 80040ee:	3601      	adds	r6, #1
 80040f0:	2102      	movs	r1, #2
 80040f2:	e000      	b.n	80040f6 <__cvt+0x42>
 80040f4:	2103      	movs	r1, #3
 80040f6:	ab03      	add	r3, sp, #12
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	ab02      	add	r3, sp, #8
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	4632      	mov	r2, r6
 8004100:	4653      	mov	r3, sl
 8004102:	ec45 4b10 	vmov	d0, r4, r5
 8004106:	f000 fd0f 	bl	8004b28 <_dtoa_r>
 800410a:	2f47      	cmp	r7, #71	; 0x47
 800410c:	4680      	mov	r8, r0
 800410e:	d102      	bne.n	8004116 <__cvt+0x62>
 8004110:	f019 0f01 	tst.w	r9, #1
 8004114:	d026      	beq.n	8004164 <__cvt+0xb0>
 8004116:	2f46      	cmp	r7, #70	; 0x46
 8004118:	eb08 0906 	add.w	r9, r8, r6
 800411c:	d111      	bne.n	8004142 <__cvt+0x8e>
 800411e:	f898 3000 	ldrb.w	r3, [r8]
 8004122:	2b30      	cmp	r3, #48	; 0x30
 8004124:	d10a      	bne.n	800413c <__cvt+0x88>
 8004126:	2200      	movs	r2, #0
 8004128:	2300      	movs	r3, #0
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004132:	b918      	cbnz	r0, 800413c <__cvt+0x88>
 8004134:	f1c6 0601 	rsb	r6, r6, #1
 8004138:	f8ca 6000 	str.w	r6, [sl]
 800413c:	f8da 3000 	ldr.w	r3, [sl]
 8004140:	4499      	add	r9, r3
 8004142:	2200      	movs	r2, #0
 8004144:	2300      	movs	r3, #0
 8004146:	4620      	mov	r0, r4
 8004148:	4629      	mov	r1, r5
 800414a:	f7fc fcbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800414e:	b938      	cbnz	r0, 8004160 <__cvt+0xac>
 8004150:	2230      	movs	r2, #48	; 0x30
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	454b      	cmp	r3, r9
 8004156:	d205      	bcs.n	8004164 <__cvt+0xb0>
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	9103      	str	r1, [sp, #12]
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e7f8      	b.n	8004152 <__cvt+0x9e>
 8004160:	f8cd 900c 	str.w	r9, [sp, #12]
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004168:	eba3 0308 	sub.w	r3, r3, r8
 800416c:	4640      	mov	r0, r8
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	b004      	add	sp, #16
 8004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004176 <__exponent>:
 8004176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004178:	2900      	cmp	r1, #0
 800417a:	4604      	mov	r4, r0
 800417c:	bfba      	itte	lt
 800417e:	4249      	neglt	r1, r1
 8004180:	232d      	movlt	r3, #45	; 0x2d
 8004182:	232b      	movge	r3, #43	; 0x2b
 8004184:	2909      	cmp	r1, #9
 8004186:	f804 2b02 	strb.w	r2, [r4], #2
 800418a:	7043      	strb	r3, [r0, #1]
 800418c:	dd20      	ble.n	80041d0 <__exponent+0x5a>
 800418e:	f10d 0307 	add.w	r3, sp, #7
 8004192:	461f      	mov	r7, r3
 8004194:	260a      	movs	r6, #10
 8004196:	fb91 f5f6 	sdiv	r5, r1, r6
 800419a:	fb06 1115 	mls	r1, r6, r5, r1
 800419e:	3130      	adds	r1, #48	; 0x30
 80041a0:	2d09      	cmp	r5, #9
 80041a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80041a6:	f103 32ff 	add.w	r2, r3, #4294967295
 80041aa:	4629      	mov	r1, r5
 80041ac:	dc09      	bgt.n	80041c2 <__exponent+0x4c>
 80041ae:	3130      	adds	r1, #48	; 0x30
 80041b0:	3b02      	subs	r3, #2
 80041b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80041b6:	42bb      	cmp	r3, r7
 80041b8:	4622      	mov	r2, r4
 80041ba:	d304      	bcc.n	80041c6 <__exponent+0x50>
 80041bc:	1a10      	subs	r0, r2, r0
 80041be:	b003      	add	sp, #12
 80041c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c2:	4613      	mov	r3, r2
 80041c4:	e7e7      	b.n	8004196 <__exponent+0x20>
 80041c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ca:	f804 2b01 	strb.w	r2, [r4], #1
 80041ce:	e7f2      	b.n	80041b6 <__exponent+0x40>
 80041d0:	2330      	movs	r3, #48	; 0x30
 80041d2:	4419      	add	r1, r3
 80041d4:	7083      	strb	r3, [r0, #2]
 80041d6:	1d02      	adds	r2, r0, #4
 80041d8:	70c1      	strb	r1, [r0, #3]
 80041da:	e7ef      	b.n	80041bc <__exponent+0x46>

080041dc <_printf_float>:
 80041dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e0:	b08d      	sub	sp, #52	; 0x34
 80041e2:	460c      	mov	r4, r1
 80041e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80041e8:	4616      	mov	r6, r2
 80041ea:	461f      	mov	r7, r3
 80041ec:	4605      	mov	r5, r0
 80041ee:	f001 fa53 	bl	8005698 <_localeconv_r>
 80041f2:	6803      	ldr	r3, [r0, #0]
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f83a 	bl	8000270 <strlen>
 80041fc:	2300      	movs	r3, #0
 80041fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004200:	f8d8 3000 	ldr.w	r3, [r8]
 8004204:	9005      	str	r0, [sp, #20]
 8004206:	3307      	adds	r3, #7
 8004208:	f023 0307 	bic.w	r3, r3, #7
 800420c:	f103 0208 	add.w	r2, r3, #8
 8004210:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004214:	f8d4 b000 	ldr.w	fp, [r4]
 8004218:	f8c8 2000 	str.w	r2, [r8]
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004224:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004232:	f04f 32ff 	mov.w	r2, #4294967295
 8004236:	4ba7      	ldr	r3, [pc, #668]	; (80044d4 <_printf_float+0x2f8>)
 8004238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800423c:	f7fc fc76 	bl	8000b2c <__aeabi_dcmpun>
 8004240:	bb70      	cbnz	r0, 80042a0 <_printf_float+0xc4>
 8004242:	f04f 32ff 	mov.w	r2, #4294967295
 8004246:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <_printf_float+0x2f8>)
 8004248:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800424c:	f7fc fc50 	bl	8000af0 <__aeabi_dcmple>
 8004250:	bb30      	cbnz	r0, 80042a0 <_printf_float+0xc4>
 8004252:	2200      	movs	r2, #0
 8004254:	2300      	movs	r3, #0
 8004256:	4640      	mov	r0, r8
 8004258:	4649      	mov	r1, r9
 800425a:	f7fc fc3f 	bl	8000adc <__aeabi_dcmplt>
 800425e:	b110      	cbz	r0, 8004266 <_printf_float+0x8a>
 8004260:	232d      	movs	r3, #45	; 0x2d
 8004262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004266:	4a9c      	ldr	r2, [pc, #624]	; (80044d8 <_printf_float+0x2fc>)
 8004268:	4b9c      	ldr	r3, [pc, #624]	; (80044dc <_printf_float+0x300>)
 800426a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800426e:	bf8c      	ite	hi
 8004270:	4690      	movhi	r8, r2
 8004272:	4698      	movls	r8, r3
 8004274:	2303      	movs	r3, #3
 8004276:	f02b 0204 	bic.w	r2, fp, #4
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	f04f 0900 	mov.w	r9, #0
 8004282:	9700      	str	r7, [sp, #0]
 8004284:	4633      	mov	r3, r6
 8004286:	aa0b      	add	r2, sp, #44	; 0x2c
 8004288:	4621      	mov	r1, r4
 800428a:	4628      	mov	r0, r5
 800428c:	f000 f9e6 	bl	800465c <_printf_common>
 8004290:	3001      	adds	r0, #1
 8004292:	f040 808d 	bne.w	80043b0 <_printf_float+0x1d4>
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	b00d      	add	sp, #52	; 0x34
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	4640      	mov	r0, r8
 80042a6:	4649      	mov	r1, r9
 80042a8:	f7fc fc40 	bl	8000b2c <__aeabi_dcmpun>
 80042ac:	b110      	cbz	r0, 80042b4 <_printf_float+0xd8>
 80042ae:	4a8c      	ldr	r2, [pc, #560]	; (80044e0 <_printf_float+0x304>)
 80042b0:	4b8c      	ldr	r3, [pc, #560]	; (80044e4 <_printf_float+0x308>)
 80042b2:	e7da      	b.n	800426a <_printf_float+0x8e>
 80042b4:	6861      	ldr	r1, [r4, #4]
 80042b6:	1c4b      	adds	r3, r1, #1
 80042b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80042bc:	a80a      	add	r0, sp, #40	; 0x28
 80042be:	d13e      	bne.n	800433e <_printf_float+0x162>
 80042c0:	2306      	movs	r3, #6
 80042c2:	6063      	str	r3, [r4, #4]
 80042c4:	2300      	movs	r3, #0
 80042c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042ca:	ab09      	add	r3, sp, #36	; 0x24
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	ec49 8b10 	vmov	d0, r8, r9
 80042d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	f8cd a004 	str.w	sl, [sp, #4]
 80042dc:	6861      	ldr	r1, [r4, #4]
 80042de:	4628      	mov	r0, r5
 80042e0:	f7ff fee8 	bl	80040b4 <__cvt>
 80042e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80042e8:	2b47      	cmp	r3, #71	; 0x47
 80042ea:	4680      	mov	r8, r0
 80042ec:	d109      	bne.n	8004302 <_printf_float+0x126>
 80042ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f0:	1cd8      	adds	r0, r3, #3
 80042f2:	db02      	blt.n	80042fa <_printf_float+0x11e>
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	4293      	cmp	r3, r2
 80042f8:	dd47      	ble.n	800438a <_printf_float+0x1ae>
 80042fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80042fe:	fa5f fa8a 	uxtb.w	sl, sl
 8004302:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004308:	d824      	bhi.n	8004354 <_printf_float+0x178>
 800430a:	3901      	subs	r1, #1
 800430c:	4652      	mov	r2, sl
 800430e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004312:	9109      	str	r1, [sp, #36]	; 0x24
 8004314:	f7ff ff2f 	bl	8004176 <__exponent>
 8004318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800431a:	1813      	adds	r3, r2, r0
 800431c:	2a01      	cmp	r2, #1
 800431e:	4681      	mov	r9, r0
 8004320:	6123      	str	r3, [r4, #16]
 8004322:	dc02      	bgt.n	800432a <_printf_float+0x14e>
 8004324:	6822      	ldr	r2, [r4, #0]
 8004326:	07d1      	lsls	r1, r2, #31
 8004328:	d501      	bpl.n	800432e <_printf_float+0x152>
 800432a:	3301      	adds	r3, #1
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0a5      	beq.n	8004282 <_printf_float+0xa6>
 8004336:	232d      	movs	r3, #45	; 0x2d
 8004338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800433c:	e7a1      	b.n	8004282 <_printf_float+0xa6>
 800433e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004342:	f000 8177 	beq.w	8004634 <_printf_float+0x458>
 8004346:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800434a:	d1bb      	bne.n	80042c4 <_printf_float+0xe8>
 800434c:	2900      	cmp	r1, #0
 800434e:	d1b9      	bne.n	80042c4 <_printf_float+0xe8>
 8004350:	2301      	movs	r3, #1
 8004352:	e7b6      	b.n	80042c2 <_printf_float+0xe6>
 8004354:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004358:	d119      	bne.n	800438e <_printf_float+0x1b2>
 800435a:	2900      	cmp	r1, #0
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	dd0c      	ble.n	800437a <_printf_float+0x19e>
 8004360:	6121      	str	r1, [r4, #16]
 8004362:	b913      	cbnz	r3, 800436a <_printf_float+0x18e>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	07d2      	lsls	r2, r2, #31
 8004368:	d502      	bpl.n	8004370 <_printf_float+0x194>
 800436a:	3301      	adds	r3, #1
 800436c:	440b      	add	r3, r1
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004372:	65a3      	str	r3, [r4, #88]	; 0x58
 8004374:	f04f 0900 	mov.w	r9, #0
 8004378:	e7d9      	b.n	800432e <_printf_float+0x152>
 800437a:	b913      	cbnz	r3, 8004382 <_printf_float+0x1a6>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d0      	lsls	r0, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x1aa>
 8004382:	3302      	adds	r3, #2
 8004384:	e7f3      	b.n	800436e <_printf_float+0x192>
 8004386:	2301      	movs	r3, #1
 8004388:	e7f1      	b.n	800436e <_printf_float+0x192>
 800438a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800438e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004392:	4293      	cmp	r3, r2
 8004394:	db05      	blt.n	80043a2 <_printf_float+0x1c6>
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	6123      	str	r3, [r4, #16]
 800439a:	07d1      	lsls	r1, r2, #31
 800439c:	d5e8      	bpl.n	8004370 <_printf_float+0x194>
 800439e:	3301      	adds	r3, #1
 80043a0:	e7e5      	b.n	800436e <_printf_float+0x192>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bfd4      	ite	le
 80043a6:	f1c3 0302 	rsble	r3, r3, #2
 80043aa:	2301      	movgt	r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	e7de      	b.n	800436e <_printf_float+0x192>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	055a      	lsls	r2, r3, #21
 80043b4:	d407      	bmi.n	80043c6 <_printf_float+0x1ea>
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	4642      	mov	r2, r8
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	d12b      	bne.n	800441c <_printf_float+0x240>
 80043c4:	e767      	b.n	8004296 <_printf_float+0xba>
 80043c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80043ca:	f240 80dc 	bls.w	8004586 <_printf_float+0x3aa>
 80043ce:	2200      	movs	r2, #0
 80043d0:	2300      	movs	r3, #0
 80043d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043d6:	f7fc fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d033      	beq.n	8004446 <_printf_float+0x26a>
 80043de:	2301      	movs	r3, #1
 80043e0:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <_printf_float+0x30c>)
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f af54 	beq.w	8004296 <_printf_float+0xba>
 80043ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f2:	429a      	cmp	r2, r3
 80043f4:	db02      	blt.n	80043fc <_printf_float+0x220>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	07d8      	lsls	r0, r3, #31
 80043fa:	d50f      	bpl.n	800441c <_printf_float+0x240>
 80043fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004400:	4631      	mov	r1, r6
 8004402:	4628      	mov	r0, r5
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af45 	beq.w	8004296 <_printf_float+0xba>
 800440c:	f04f 0800 	mov.w	r8, #0
 8004410:	f104 091a 	add.w	r9, r4, #26
 8004414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	4543      	cmp	r3, r8
 800441a:	dc09      	bgt.n	8004430 <_printf_float+0x254>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	079b      	lsls	r3, r3, #30
 8004420:	f100 8103 	bmi.w	800462a <_printf_float+0x44e>
 8004424:	68e0      	ldr	r0, [r4, #12]
 8004426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004428:	4298      	cmp	r0, r3
 800442a:	bfb8      	it	lt
 800442c:	4618      	movlt	r0, r3
 800442e:	e734      	b.n	800429a <_printf_float+0xbe>
 8004430:	2301      	movs	r3, #1
 8004432:	464a      	mov	r2, r9
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af2b 	beq.w	8004296 <_printf_float+0xba>
 8004440:	f108 0801 	add.w	r8, r8, #1
 8004444:	e7e6      	b.n	8004414 <_printf_float+0x238>
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	dc2b      	bgt.n	80044a4 <_printf_float+0x2c8>
 800444c:	2301      	movs	r3, #1
 800444e:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <_printf_float+0x30c>)
 8004450:	4631      	mov	r1, r6
 8004452:	4628      	mov	r0, r5
 8004454:	47b8      	blx	r7
 8004456:	3001      	adds	r0, #1
 8004458:	f43f af1d 	beq.w	8004296 <_printf_float+0xba>
 800445c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445e:	b923      	cbnz	r3, 800446a <_printf_float+0x28e>
 8004460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004462:	b913      	cbnz	r3, 800446a <_printf_float+0x28e>
 8004464:	6823      	ldr	r3, [r4, #0]
 8004466:	07d9      	lsls	r1, r3, #31
 8004468:	d5d8      	bpl.n	800441c <_printf_float+0x240>
 800446a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f af0e 	beq.w	8004296 <_printf_float+0xba>
 800447a:	f04f 0900 	mov.w	r9, #0
 800447e:	f104 0a1a 	add.w	sl, r4, #26
 8004482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004484:	425b      	negs	r3, r3
 8004486:	454b      	cmp	r3, r9
 8004488:	dc01      	bgt.n	800448e <_printf_float+0x2b2>
 800448a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800448c:	e794      	b.n	80043b8 <_printf_float+0x1dc>
 800448e:	2301      	movs	r3, #1
 8004490:	4652      	mov	r2, sl
 8004492:	4631      	mov	r1, r6
 8004494:	4628      	mov	r0, r5
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	f43f aefc 	beq.w	8004296 <_printf_float+0xba>
 800449e:	f109 0901 	add.w	r9, r9, #1
 80044a2:	e7ee      	b.n	8004482 <_printf_float+0x2a6>
 80044a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044a8:	429a      	cmp	r2, r3
 80044aa:	bfa8      	it	ge
 80044ac:	461a      	movge	r2, r3
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	4691      	mov	r9, r2
 80044b2:	dd07      	ble.n	80044c4 <_printf_float+0x2e8>
 80044b4:	4613      	mov	r3, r2
 80044b6:	4631      	mov	r1, r6
 80044b8:	4642      	mov	r2, r8
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	f43f aee9 	beq.w	8004296 <_printf_float+0xba>
 80044c4:	f104 031a 	add.w	r3, r4, #26
 80044c8:	f04f 0b00 	mov.w	fp, #0
 80044cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d0:	9306      	str	r3, [sp, #24]
 80044d2:	e015      	b.n	8004500 <_printf_float+0x324>
 80044d4:	7fefffff 	.word	0x7fefffff
 80044d8:	080060fa 	.word	0x080060fa
 80044dc:	080060f6 	.word	0x080060f6
 80044e0:	08006102 	.word	0x08006102
 80044e4:	080060fe 	.word	0x080060fe
 80044e8:	08006106 	.word	0x08006106
 80044ec:	2301      	movs	r3, #1
 80044ee:	9a06      	ldr	r2, [sp, #24]
 80044f0:	4631      	mov	r1, r6
 80044f2:	4628      	mov	r0, r5
 80044f4:	47b8      	blx	r7
 80044f6:	3001      	adds	r0, #1
 80044f8:	f43f aecd 	beq.w	8004296 <_printf_float+0xba>
 80044fc:	f10b 0b01 	add.w	fp, fp, #1
 8004500:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004504:	ebaa 0309 	sub.w	r3, sl, r9
 8004508:	455b      	cmp	r3, fp
 800450a:	dcef      	bgt.n	80044ec <_printf_float+0x310>
 800450c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004510:	429a      	cmp	r2, r3
 8004512:	44d0      	add	r8, sl
 8004514:	db15      	blt.n	8004542 <_printf_float+0x366>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	07da      	lsls	r2, r3, #31
 800451a:	d412      	bmi.n	8004542 <_printf_float+0x366>
 800451c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800451e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004520:	eba3 020a 	sub.w	r2, r3, sl
 8004524:	eba3 0a01 	sub.w	sl, r3, r1
 8004528:	4592      	cmp	sl, r2
 800452a:	bfa8      	it	ge
 800452c:	4692      	movge	sl, r2
 800452e:	f1ba 0f00 	cmp.w	sl, #0
 8004532:	dc0e      	bgt.n	8004552 <_printf_float+0x376>
 8004534:	f04f 0800 	mov.w	r8, #0
 8004538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800453c:	f104 091a 	add.w	r9, r4, #26
 8004540:	e019      	b.n	8004576 <_printf_float+0x39a>
 8004542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	d1e5      	bne.n	800451c <_printf_float+0x340>
 8004550:	e6a1      	b.n	8004296 <_printf_float+0xba>
 8004552:	4653      	mov	r3, sl
 8004554:	4642      	mov	r2, r8
 8004556:	4631      	mov	r1, r6
 8004558:	4628      	mov	r0, r5
 800455a:	47b8      	blx	r7
 800455c:	3001      	adds	r0, #1
 800455e:	d1e9      	bne.n	8004534 <_printf_float+0x358>
 8004560:	e699      	b.n	8004296 <_printf_float+0xba>
 8004562:	2301      	movs	r3, #1
 8004564:	464a      	mov	r2, r9
 8004566:	4631      	mov	r1, r6
 8004568:	4628      	mov	r0, r5
 800456a:	47b8      	blx	r7
 800456c:	3001      	adds	r0, #1
 800456e:	f43f ae92 	beq.w	8004296 <_printf_float+0xba>
 8004572:	f108 0801 	add.w	r8, r8, #1
 8004576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	eba3 030a 	sub.w	r3, r3, sl
 8004580:	4543      	cmp	r3, r8
 8004582:	dcee      	bgt.n	8004562 <_printf_float+0x386>
 8004584:	e74a      	b.n	800441c <_printf_float+0x240>
 8004586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004588:	2a01      	cmp	r2, #1
 800458a:	dc01      	bgt.n	8004590 <_printf_float+0x3b4>
 800458c:	07db      	lsls	r3, r3, #31
 800458e:	d53a      	bpl.n	8004606 <_printf_float+0x42a>
 8004590:	2301      	movs	r3, #1
 8004592:	4642      	mov	r2, r8
 8004594:	4631      	mov	r1, r6
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	f43f ae7b 	beq.w	8004296 <_printf_float+0xba>
 80045a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f108 0801 	add.w	r8, r8, #1
 80045b0:	f43f ae71 	beq.w	8004296 <_printf_float+0xba>
 80045b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b6:	2200      	movs	r2, #0
 80045b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80045bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045c0:	2300      	movs	r3, #0
 80045c2:	f7fc fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80045c6:	b9c8      	cbnz	r0, 80045fc <_printf_float+0x420>
 80045c8:	4653      	mov	r3, sl
 80045ca:	4642      	mov	r2, r8
 80045cc:	4631      	mov	r1, r6
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	d10e      	bne.n	80045f4 <_printf_float+0x418>
 80045d6:	e65e      	b.n	8004296 <_printf_float+0xba>
 80045d8:	2301      	movs	r3, #1
 80045da:	4652      	mov	r2, sl
 80045dc:	4631      	mov	r1, r6
 80045de:	4628      	mov	r0, r5
 80045e0:	47b8      	blx	r7
 80045e2:	3001      	adds	r0, #1
 80045e4:	f43f ae57 	beq.w	8004296 <_printf_float+0xba>
 80045e8:	f108 0801 	add.w	r8, r8, #1
 80045ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045ee:	3b01      	subs	r3, #1
 80045f0:	4543      	cmp	r3, r8
 80045f2:	dcf1      	bgt.n	80045d8 <_printf_float+0x3fc>
 80045f4:	464b      	mov	r3, r9
 80045f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045fa:	e6de      	b.n	80043ba <_printf_float+0x1de>
 80045fc:	f04f 0800 	mov.w	r8, #0
 8004600:	f104 0a1a 	add.w	sl, r4, #26
 8004604:	e7f2      	b.n	80045ec <_printf_float+0x410>
 8004606:	2301      	movs	r3, #1
 8004608:	e7df      	b.n	80045ca <_printf_float+0x3ee>
 800460a:	2301      	movs	r3, #1
 800460c:	464a      	mov	r2, r9
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	f43f ae3e 	beq.w	8004296 <_printf_float+0xba>
 800461a:	f108 0801 	add.w	r8, r8, #1
 800461e:	68e3      	ldr	r3, [r4, #12]
 8004620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	4543      	cmp	r3, r8
 8004626:	dcf0      	bgt.n	800460a <_printf_float+0x42e>
 8004628:	e6fc      	b.n	8004424 <_printf_float+0x248>
 800462a:	f04f 0800 	mov.w	r8, #0
 800462e:	f104 0919 	add.w	r9, r4, #25
 8004632:	e7f4      	b.n	800461e <_printf_float+0x442>
 8004634:	2900      	cmp	r1, #0
 8004636:	f43f ae8b 	beq.w	8004350 <_printf_float+0x174>
 800463a:	2300      	movs	r3, #0
 800463c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004640:	ab09      	add	r3, sp, #36	; 0x24
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	ec49 8b10 	vmov	d0, r8, r9
 8004648:	6022      	str	r2, [r4, #0]
 800464a:	f8cd a004 	str.w	sl, [sp, #4]
 800464e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004652:	4628      	mov	r0, r5
 8004654:	f7ff fd2e 	bl	80040b4 <__cvt>
 8004658:	4680      	mov	r8, r0
 800465a:	e648      	b.n	80042ee <_printf_float+0x112>

0800465c <_printf_common>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	4691      	mov	r9, r2
 8004662:	461f      	mov	r7, r3
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	690b      	ldr	r3, [r1, #16]
 8004668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800466c:	4293      	cmp	r3, r2
 800466e:	bfb8      	it	lt
 8004670:	4613      	movlt	r3, r2
 8004672:	f8c9 3000 	str.w	r3, [r9]
 8004676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800467a:	4606      	mov	r6, r0
 800467c:	460c      	mov	r4, r1
 800467e:	b112      	cbz	r2, 8004686 <_printf_common+0x2a>
 8004680:	3301      	adds	r3, #1
 8004682:	f8c9 3000 	str.w	r3, [r9]
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	0699      	lsls	r1, r3, #26
 800468a:	bf42      	ittt	mi
 800468c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004690:	3302      	addmi	r3, #2
 8004692:	f8c9 3000 	strmi.w	r3, [r9]
 8004696:	6825      	ldr	r5, [r4, #0]
 8004698:	f015 0506 	ands.w	r5, r5, #6
 800469c:	d107      	bne.n	80046ae <_printf_common+0x52>
 800469e:	f104 0a19 	add.w	sl, r4, #25
 80046a2:	68e3      	ldr	r3, [r4, #12]
 80046a4:	f8d9 2000 	ldr.w	r2, [r9]
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	dc28      	bgt.n	8004700 <_printf_common+0xa4>
 80046ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	3300      	adds	r3, #0
 80046b6:	bf18      	it	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	0692      	lsls	r2, r2, #26
 80046bc:	d42d      	bmi.n	800471a <_printf_common+0xbe>
 80046be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c2:	4639      	mov	r1, r7
 80046c4:	4630      	mov	r0, r6
 80046c6:	47c0      	blx	r8
 80046c8:	3001      	adds	r0, #1
 80046ca:	d020      	beq.n	800470e <_printf_common+0xb2>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	68e5      	ldr	r5, [r4, #12]
 80046d0:	f8d9 2000 	ldr.w	r2, [r9]
 80046d4:	f003 0306 	and.w	r3, r3, #6
 80046d8:	2b04      	cmp	r3, #4
 80046da:	bf08      	it	eq
 80046dc:	1aad      	subeq	r5, r5, r2
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	6922      	ldr	r2, [r4, #16]
 80046e2:	bf0c      	ite	eq
 80046e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046e8:	2500      	movne	r5, #0
 80046ea:	4293      	cmp	r3, r2
 80046ec:	bfc4      	itt	gt
 80046ee:	1a9b      	subgt	r3, r3, r2
 80046f0:	18ed      	addgt	r5, r5, r3
 80046f2:	f04f 0900 	mov.w	r9, #0
 80046f6:	341a      	adds	r4, #26
 80046f8:	454d      	cmp	r5, r9
 80046fa:	d11a      	bne.n	8004732 <_printf_common+0xd6>
 80046fc:	2000      	movs	r0, #0
 80046fe:	e008      	b.n	8004712 <_printf_common+0xb6>
 8004700:	2301      	movs	r3, #1
 8004702:	4652      	mov	r2, sl
 8004704:	4639      	mov	r1, r7
 8004706:	4630      	mov	r0, r6
 8004708:	47c0      	blx	r8
 800470a:	3001      	adds	r0, #1
 800470c:	d103      	bne.n	8004716 <_printf_common+0xba>
 800470e:	f04f 30ff 	mov.w	r0, #4294967295
 8004712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004716:	3501      	adds	r5, #1
 8004718:	e7c3      	b.n	80046a2 <_printf_common+0x46>
 800471a:	18e1      	adds	r1, r4, r3
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	2030      	movs	r0, #48	; 0x30
 8004720:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004724:	4422      	add	r2, r4
 8004726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800472a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800472e:	3302      	adds	r3, #2
 8004730:	e7c5      	b.n	80046be <_printf_common+0x62>
 8004732:	2301      	movs	r3, #1
 8004734:	4622      	mov	r2, r4
 8004736:	4639      	mov	r1, r7
 8004738:	4630      	mov	r0, r6
 800473a:	47c0      	blx	r8
 800473c:	3001      	adds	r0, #1
 800473e:	d0e6      	beq.n	800470e <_printf_common+0xb2>
 8004740:	f109 0901 	add.w	r9, r9, #1
 8004744:	e7d8      	b.n	80046f8 <_printf_common+0x9c>
	...

08004748 <_printf_i>:
 8004748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800474c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004750:	460c      	mov	r4, r1
 8004752:	7e09      	ldrb	r1, [r1, #24]
 8004754:	b085      	sub	sp, #20
 8004756:	296e      	cmp	r1, #110	; 0x6e
 8004758:	4617      	mov	r7, r2
 800475a:	4606      	mov	r6, r0
 800475c:	4698      	mov	r8, r3
 800475e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004760:	f000 80b3 	beq.w	80048ca <_printf_i+0x182>
 8004764:	d822      	bhi.n	80047ac <_printf_i+0x64>
 8004766:	2963      	cmp	r1, #99	; 0x63
 8004768:	d036      	beq.n	80047d8 <_printf_i+0x90>
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x3a>
 800476c:	2900      	cmp	r1, #0
 800476e:	f000 80b9 	beq.w	80048e4 <_printf_i+0x19c>
 8004772:	2958      	cmp	r1, #88	; 0x58
 8004774:	f000 8083 	beq.w	800487e <_printf_i+0x136>
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004780:	e032      	b.n	80047e8 <_printf_i+0xa0>
 8004782:	2964      	cmp	r1, #100	; 0x64
 8004784:	d001      	beq.n	800478a <_printf_i+0x42>
 8004786:	2969      	cmp	r1, #105	; 0x69
 8004788:	d1f6      	bne.n	8004778 <_printf_i+0x30>
 800478a:	6820      	ldr	r0, [r4, #0]
 800478c:	6813      	ldr	r3, [r2, #0]
 800478e:	0605      	lsls	r5, r0, #24
 8004790:	f103 0104 	add.w	r1, r3, #4
 8004794:	d52a      	bpl.n	80047ec <_printf_i+0xa4>
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	da03      	bge.n	80047a6 <_printf_i+0x5e>
 800479e:	222d      	movs	r2, #45	; 0x2d
 80047a0:	425b      	negs	r3, r3
 80047a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80047a6:	486f      	ldr	r0, [pc, #444]	; (8004964 <_printf_i+0x21c>)
 80047a8:	220a      	movs	r2, #10
 80047aa:	e039      	b.n	8004820 <_printf_i+0xd8>
 80047ac:	2973      	cmp	r1, #115	; 0x73
 80047ae:	f000 809d 	beq.w	80048ec <_printf_i+0x1a4>
 80047b2:	d808      	bhi.n	80047c6 <_printf_i+0x7e>
 80047b4:	296f      	cmp	r1, #111	; 0x6f
 80047b6:	d020      	beq.n	80047fa <_printf_i+0xb2>
 80047b8:	2970      	cmp	r1, #112	; 0x70
 80047ba:	d1dd      	bne.n	8004778 <_printf_i+0x30>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	f043 0320 	orr.w	r3, r3, #32
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	e003      	b.n	80047ce <_printf_i+0x86>
 80047c6:	2975      	cmp	r1, #117	; 0x75
 80047c8:	d017      	beq.n	80047fa <_printf_i+0xb2>
 80047ca:	2978      	cmp	r1, #120	; 0x78
 80047cc:	d1d4      	bne.n	8004778 <_printf_i+0x30>
 80047ce:	2378      	movs	r3, #120	; 0x78
 80047d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047d4:	4864      	ldr	r0, [pc, #400]	; (8004968 <_printf_i+0x220>)
 80047d6:	e055      	b.n	8004884 <_printf_i+0x13c>
 80047d8:	6813      	ldr	r3, [r2, #0]
 80047da:	1d19      	adds	r1, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6011      	str	r1, [r2, #0]
 80047e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e8:	2301      	movs	r3, #1
 80047ea:	e08c      	b.n	8004906 <_printf_i+0x1be>
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6011      	str	r1, [r2, #0]
 80047f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047f4:	bf18      	it	ne
 80047f6:	b21b      	sxthne	r3, r3
 80047f8:	e7cf      	b.n	800479a <_printf_i+0x52>
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1d18      	adds	r0, r3, #4
 8004800:	6010      	str	r0, [r2, #0]
 8004802:	0628      	lsls	r0, r5, #24
 8004804:	d501      	bpl.n	800480a <_printf_i+0xc2>
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	e002      	b.n	8004810 <_printf_i+0xc8>
 800480a:	0668      	lsls	r0, r5, #25
 800480c:	d5fb      	bpl.n	8004806 <_printf_i+0xbe>
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	4854      	ldr	r0, [pc, #336]	; (8004964 <_printf_i+0x21c>)
 8004812:	296f      	cmp	r1, #111	; 0x6f
 8004814:	bf14      	ite	ne
 8004816:	220a      	movne	r2, #10
 8004818:	2208      	moveq	r2, #8
 800481a:	2100      	movs	r1, #0
 800481c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004820:	6865      	ldr	r5, [r4, #4]
 8004822:	60a5      	str	r5, [r4, #8]
 8004824:	2d00      	cmp	r5, #0
 8004826:	f2c0 8095 	blt.w	8004954 <_printf_i+0x20c>
 800482a:	6821      	ldr	r1, [r4, #0]
 800482c:	f021 0104 	bic.w	r1, r1, #4
 8004830:	6021      	str	r1, [r4, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d13d      	bne.n	80048b2 <_printf_i+0x16a>
 8004836:	2d00      	cmp	r5, #0
 8004838:	f040 808e 	bne.w	8004958 <_printf_i+0x210>
 800483c:	4665      	mov	r5, ip
 800483e:	2a08      	cmp	r2, #8
 8004840:	d10b      	bne.n	800485a <_printf_i+0x112>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	07db      	lsls	r3, r3, #31
 8004846:	d508      	bpl.n	800485a <_printf_i+0x112>
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	6862      	ldr	r2, [r4, #4]
 800484c:	429a      	cmp	r2, r3
 800484e:	bfde      	ittt	le
 8004850:	2330      	movle	r3, #48	; 0x30
 8004852:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004856:	f105 35ff 	addle.w	r5, r5, #4294967295
 800485a:	ebac 0305 	sub.w	r3, ip, r5
 800485e:	6123      	str	r3, [r4, #16]
 8004860:	f8cd 8000 	str.w	r8, [sp]
 8004864:	463b      	mov	r3, r7
 8004866:	aa03      	add	r2, sp, #12
 8004868:	4621      	mov	r1, r4
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff fef6 	bl	800465c <_printf_common>
 8004870:	3001      	adds	r0, #1
 8004872:	d14d      	bne.n	8004910 <_printf_i+0x1c8>
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	b005      	add	sp, #20
 800487a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800487e:	4839      	ldr	r0, [pc, #228]	; (8004964 <_printf_i+0x21c>)
 8004880:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	6821      	ldr	r1, [r4, #0]
 8004888:	1d1d      	adds	r5, r3, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6015      	str	r5, [r2, #0]
 800488e:	060a      	lsls	r2, r1, #24
 8004890:	d50b      	bpl.n	80048aa <_printf_i+0x162>
 8004892:	07ca      	lsls	r2, r1, #31
 8004894:	bf44      	itt	mi
 8004896:	f041 0120 	orrmi.w	r1, r1, #32
 800489a:	6021      	strmi	r1, [r4, #0]
 800489c:	b91b      	cbnz	r3, 80048a6 <_printf_i+0x15e>
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	f022 0220 	bic.w	r2, r2, #32
 80048a4:	6022      	str	r2, [r4, #0]
 80048a6:	2210      	movs	r2, #16
 80048a8:	e7b7      	b.n	800481a <_printf_i+0xd2>
 80048aa:	064d      	lsls	r5, r1, #25
 80048ac:	bf48      	it	mi
 80048ae:	b29b      	uxthmi	r3, r3
 80048b0:	e7ef      	b.n	8004892 <_printf_i+0x14a>
 80048b2:	4665      	mov	r5, ip
 80048b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b8:	fb02 3311 	mls	r3, r2, r1, r3
 80048bc:	5cc3      	ldrb	r3, [r0, r3]
 80048be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048c2:	460b      	mov	r3, r1
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d1f5      	bne.n	80048b4 <_printf_i+0x16c>
 80048c8:	e7b9      	b.n	800483e <_printf_i+0xf6>
 80048ca:	6813      	ldr	r3, [r2, #0]
 80048cc:	6825      	ldr	r5, [r4, #0]
 80048ce:	6961      	ldr	r1, [r4, #20]
 80048d0:	1d18      	adds	r0, r3, #4
 80048d2:	6010      	str	r0, [r2, #0]
 80048d4:	0628      	lsls	r0, r5, #24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	d501      	bpl.n	80048de <_printf_i+0x196>
 80048da:	6019      	str	r1, [r3, #0]
 80048dc:	e002      	b.n	80048e4 <_printf_i+0x19c>
 80048de:	066a      	lsls	r2, r5, #25
 80048e0:	d5fb      	bpl.n	80048da <_printf_i+0x192>
 80048e2:	8019      	strh	r1, [r3, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	6123      	str	r3, [r4, #16]
 80048e8:	4665      	mov	r5, ip
 80048ea:	e7b9      	b.n	8004860 <_printf_i+0x118>
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	1d19      	adds	r1, r3, #4
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	681d      	ldr	r5, [r3, #0]
 80048f4:	6862      	ldr	r2, [r4, #4]
 80048f6:	2100      	movs	r1, #0
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7fb fc69 	bl	80001d0 <memchr>
 80048fe:	b108      	cbz	r0, 8004904 <_printf_i+0x1bc>
 8004900:	1b40      	subs	r0, r0, r5
 8004902:	6060      	str	r0, [r4, #4]
 8004904:	6863      	ldr	r3, [r4, #4]
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	2300      	movs	r3, #0
 800490a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490e:	e7a7      	b.n	8004860 <_printf_i+0x118>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	462a      	mov	r2, r5
 8004914:	4639      	mov	r1, r7
 8004916:	4630      	mov	r0, r6
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d0aa      	beq.n	8004874 <_printf_i+0x12c>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	079b      	lsls	r3, r3, #30
 8004922:	d413      	bmi.n	800494c <_printf_i+0x204>
 8004924:	68e0      	ldr	r0, [r4, #12]
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	4298      	cmp	r0, r3
 800492a:	bfb8      	it	lt
 800492c:	4618      	movlt	r0, r3
 800492e:	e7a3      	b.n	8004878 <_printf_i+0x130>
 8004930:	2301      	movs	r3, #1
 8004932:	464a      	mov	r2, r9
 8004934:	4639      	mov	r1, r7
 8004936:	4630      	mov	r0, r6
 8004938:	47c0      	blx	r8
 800493a:	3001      	adds	r0, #1
 800493c:	d09a      	beq.n	8004874 <_printf_i+0x12c>
 800493e:	3501      	adds	r5, #1
 8004940:	68e3      	ldr	r3, [r4, #12]
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	42ab      	cmp	r3, r5
 8004948:	dcf2      	bgt.n	8004930 <_printf_i+0x1e8>
 800494a:	e7eb      	b.n	8004924 <_printf_i+0x1dc>
 800494c:	2500      	movs	r5, #0
 800494e:	f104 0919 	add.w	r9, r4, #25
 8004952:	e7f5      	b.n	8004940 <_printf_i+0x1f8>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ac      	bne.n	80048b2 <_printf_i+0x16a>
 8004958:	7803      	ldrb	r3, [r0, #0]
 800495a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800495e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004962:	e76c      	b.n	800483e <_printf_i+0xf6>
 8004964:	08006108 	.word	0x08006108
 8004968:	08006119 	.word	0x08006119

0800496c <_sbrk_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4c06      	ldr	r4, [pc, #24]	; (8004988 <_sbrk_r+0x1c>)
 8004970:	2300      	movs	r3, #0
 8004972:	4605      	mov	r5, r0
 8004974:	4608      	mov	r0, r1
 8004976:	6023      	str	r3, [r4, #0]
 8004978:	f7fd f8e4 	bl	8001b44 <_sbrk>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_sbrk_r+0x1a>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	b103      	cbz	r3, 8004986 <_sbrk_r+0x1a>
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20000254 	.word	0x20000254

0800498c <siprintf>:
 800498c:	b40e      	push	{r1, r2, r3}
 800498e:	b500      	push	{lr}
 8004990:	b09c      	sub	sp, #112	; 0x70
 8004992:	ab1d      	add	r3, sp, #116	; 0x74
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800499c:	4809      	ldr	r0, [pc, #36]	; (80049c4 <siprintf+0x38>)
 800499e:	9107      	str	r1, [sp, #28]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4909      	ldr	r1, [pc, #36]	; (80049c8 <siprintf+0x3c>)
 80049a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a8:	9105      	str	r1, [sp, #20]
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	a902      	add	r1, sp, #8
 80049b0:	f001 f9f4 	bl	8005d9c <_svfiprintf_r>
 80049b4:	9b02      	ldr	r3, [sp, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	b01c      	add	sp, #112	; 0x70
 80049bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049c0:	b003      	add	sp, #12
 80049c2:	4770      	bx	lr
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	ffff0208 	.word	0xffff0208

080049cc <strncmp>:
 80049cc:	b510      	push	{r4, lr}
 80049ce:	b16a      	cbz	r2, 80049ec <strncmp+0x20>
 80049d0:	3901      	subs	r1, #1
 80049d2:	1884      	adds	r4, r0, r2
 80049d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80049d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80049dc:	4293      	cmp	r3, r2
 80049de:	d103      	bne.n	80049e8 <strncmp+0x1c>
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d001      	beq.n	80049e8 <strncmp+0x1c>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f5      	bne.n	80049d4 <strncmp+0x8>
 80049e8:	1a98      	subs	r0, r3, r2
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	4610      	mov	r0, r2
 80049ee:	e7fc      	b.n	80049ea <strncmp+0x1e>

080049f0 <__ascii_wctomb>:
 80049f0:	b149      	cbz	r1, 8004a06 <__ascii_wctomb+0x16>
 80049f2:	2aff      	cmp	r2, #255	; 0xff
 80049f4:	bf85      	ittet	hi
 80049f6:	238a      	movhi	r3, #138	; 0x8a
 80049f8:	6003      	strhi	r3, [r0, #0]
 80049fa:	700a      	strbls	r2, [r1, #0]
 80049fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8004a00:	bf98      	it	ls
 8004a02:	2001      	movls	r0, #1
 8004a04:	4770      	bx	lr
 8004a06:	4608      	mov	r0, r1
 8004a08:	4770      	bx	lr

08004a0a <quorem>:
 8004a0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a0e:	6903      	ldr	r3, [r0, #16]
 8004a10:	690c      	ldr	r4, [r1, #16]
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	4680      	mov	r8, r0
 8004a16:	f2c0 8082 	blt.w	8004b1e <quorem+0x114>
 8004a1a:	3c01      	subs	r4, #1
 8004a1c:	f101 0714 	add.w	r7, r1, #20
 8004a20:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a24:	f100 0614 	add.w	r6, r0, #20
 8004a28:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a2c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a30:	eb06 030c 	add.w	r3, r6, ip
 8004a34:	3501      	adds	r5, #1
 8004a36:	eb07 090c 	add.w	r9, r7, ip
 8004a3a:	9301      	str	r3, [sp, #4]
 8004a3c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a40:	b395      	cbz	r5, 8004aa8 <quorem+0x9e>
 8004a42:	f04f 0a00 	mov.w	sl, #0
 8004a46:	4638      	mov	r0, r7
 8004a48:	46b6      	mov	lr, r6
 8004a4a:	46d3      	mov	fp, sl
 8004a4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a50:	b293      	uxth	r3, r2
 8004a52:	fb05 a303 	mla	r3, r5, r3, sl
 8004a56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	ebab 0303 	sub.w	r3, fp, r3
 8004a60:	0c12      	lsrs	r2, r2, #16
 8004a62:	f8de b000 	ldr.w	fp, [lr]
 8004a66:	fb05 a202 	mla	r2, r5, r2, sl
 8004a6a:	fa13 f38b 	uxtah	r3, r3, fp
 8004a6e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a72:	fa1f fb82 	uxth.w	fp, r2
 8004a76:	f8de 2000 	ldr.w	r2, [lr]
 8004a7a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a88:	4581      	cmp	r9, r0
 8004a8a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a8e:	f84e 3b04 	str.w	r3, [lr], #4
 8004a92:	d2db      	bcs.n	8004a4c <quorem+0x42>
 8004a94:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a98:	b933      	cbnz	r3, 8004aa8 <quorem+0x9e>
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	3b04      	subs	r3, #4
 8004a9e:	429e      	cmp	r6, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	d330      	bcc.n	8004b06 <quorem+0xfc>
 8004aa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f001 f823 	bl	8005af4 <__mcmp>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	db25      	blt.n	8004afe <quorem+0xf4>
 8004ab2:	3501      	adds	r5, #1
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f04f 0c00 	mov.w	ip, #0
 8004aba:	f857 2b04 	ldr.w	r2, [r7], #4
 8004abe:	f8d0 e000 	ldr.w	lr, [r0]
 8004ac2:	b293      	uxth	r3, r2
 8004ac4:	ebac 0303 	sub.w	r3, ip, r3
 8004ac8:	0c12      	lsrs	r2, r2, #16
 8004aca:	fa13 f38e 	uxtah	r3, r3, lr
 8004ace:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004adc:	45b9      	cmp	r9, r7
 8004ade:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ae2:	f840 3b04 	str.w	r3, [r0], #4
 8004ae6:	d2e8      	bcs.n	8004aba <quorem+0xb0>
 8004ae8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004aec:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004af0:	b92a      	cbnz	r2, 8004afe <quorem+0xf4>
 8004af2:	3b04      	subs	r3, #4
 8004af4:	429e      	cmp	r6, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	d30b      	bcc.n	8004b12 <quorem+0x108>
 8004afa:	f8c8 4010 	str.w	r4, [r8, #16]
 8004afe:	4628      	mov	r0, r5
 8004b00:	b003      	add	sp, #12
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d1ca      	bne.n	8004aa4 <quorem+0x9a>
 8004b0e:	3c01      	subs	r4, #1
 8004b10:	e7c5      	b.n	8004a9e <quorem+0x94>
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	3b04      	subs	r3, #4
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	d1ef      	bne.n	8004afa <quorem+0xf0>
 8004b1a:	3c01      	subs	r4, #1
 8004b1c:	e7ea      	b.n	8004af4 <quorem+0xea>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e7ee      	b.n	8004b00 <quorem+0xf6>
 8004b22:	0000      	movs	r0, r0
 8004b24:	0000      	movs	r0, r0
	...

08004b28 <_dtoa_r>:
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	ec57 6b10 	vmov	r6, r7, d0
 8004b30:	b097      	sub	sp, #92	; 0x5c
 8004b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b34:	9106      	str	r1, [sp, #24]
 8004b36:	4604      	mov	r4, r0
 8004b38:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b3a:	9312      	str	r3, [sp, #72]	; 0x48
 8004b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b40:	e9cd 6700 	strd	r6, r7, [sp]
 8004b44:	b93d      	cbnz	r5, 8004b56 <_dtoa_r+0x2e>
 8004b46:	2010      	movs	r0, #16
 8004b48:	f000 fdb4 	bl	80056b4 <malloc>
 8004b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8004b4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b52:	6005      	str	r5, [r0, #0]
 8004b54:	60c5      	str	r5, [r0, #12]
 8004b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	b151      	cbz	r1, 8004b72 <_dtoa_r+0x4a>
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	604a      	str	r2, [r1, #4]
 8004b60:	2301      	movs	r3, #1
 8004b62:	4093      	lsls	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 fde2 	bl	8005730 <_Bfree>
 8004b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	1e3b      	subs	r3, r7, #0
 8004b74:	bfbb      	ittet	lt
 8004b76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b7a:	9301      	strlt	r3, [sp, #4]
 8004b7c:	2300      	movge	r3, #0
 8004b7e:	2201      	movlt	r2, #1
 8004b80:	bfac      	ite	ge
 8004b82:	f8c8 3000 	strge.w	r3, [r8]
 8004b86:	f8c8 2000 	strlt.w	r2, [r8]
 8004b8a:	4baf      	ldr	r3, [pc, #700]	; (8004e48 <_dtoa_r+0x320>)
 8004b8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b90:	ea33 0308 	bics.w	r3, r3, r8
 8004b94:	d114      	bne.n	8004bc0 <_dtoa_r+0x98>
 8004b96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b98:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	9b00      	ldr	r3, [sp, #0]
 8004ba0:	b923      	cbnz	r3, 8004bac <_dtoa_r+0x84>
 8004ba2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	f000 8542 	beq.w	8005630 <_dtoa_r+0xb08>
 8004bac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004e5c <_dtoa_r+0x334>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 8544 	beq.w	8005640 <_dtoa_r+0xb18>
 8004bb8:	f10b 0303 	add.w	r3, fp, #3
 8004bbc:	f000 bd3e 	b.w	800563c <_dtoa_r+0xb14>
 8004bc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4630      	mov	r0, r6
 8004bca:	4639      	mov	r1, r7
 8004bcc:	f7fb ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bd0:	4681      	mov	r9, r0
 8004bd2:	b168      	cbz	r0, 8004bf0 <_dtoa_r+0xc8>
 8004bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8524 	beq.w	800562a <_dtoa_r+0xb02>
 8004be2:	4b9a      	ldr	r3, [pc, #616]	; (8004e4c <_dtoa_r+0x324>)
 8004be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004be6:	f103 3bff 	add.w	fp, r3, #4294967295
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	f000 bd28 	b.w	8005640 <_dtoa_r+0xb18>
 8004bf0:	aa14      	add	r2, sp, #80	; 0x50
 8004bf2:	a915      	add	r1, sp, #84	; 0x54
 8004bf4:	ec47 6b10 	vmov	d0, r6, r7
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fff2 	bl	8005be2 <__d2b>
 8004bfe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004c02:	9004      	str	r0, [sp, #16]
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	d07c      	beq.n	8004d02 <_dtoa_r+0x1da>
 8004c08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004c10:	46b2      	mov	sl, r6
 8004c12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004c1e:	2200      	movs	r2, #0
 8004c20:	4b8b      	ldr	r3, [pc, #556]	; (8004e50 <_dtoa_r+0x328>)
 8004c22:	4650      	mov	r0, sl
 8004c24:	4659      	mov	r1, fp
 8004c26:	f7fb fb2f 	bl	8000288 <__aeabi_dsub>
 8004c2a:	a381      	add	r3, pc, #516	; (adr r3, 8004e30 <_dtoa_r+0x308>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fce2 	bl	80005f8 <__aeabi_dmul>
 8004c34:	a380      	add	r3, pc, #512	; (adr r3, 8004e38 <_dtoa_r+0x310>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fb27 	bl	800028c <__adddf3>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	4628      	mov	r0, r5
 8004c42:	460f      	mov	r7, r1
 8004c44:	f7fb fc6e 	bl	8000524 <__aeabi_i2d>
 8004c48:	a37d      	add	r3, pc, #500	; (adr r3, 8004e40 <_dtoa_r+0x318>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fcd3 	bl	80005f8 <__aeabi_dmul>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4630      	mov	r0, r6
 8004c58:	4639      	mov	r1, r7
 8004c5a:	f7fb fb17 	bl	800028c <__adddf3>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	f7fb ff79 	bl	8000b58 <__aeabi_d2iz>
 8004c66:	2200      	movs	r2, #0
 8004c68:	4682      	mov	sl, r0
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb ff34 	bl	8000adc <__aeabi_dcmplt>
 8004c74:	b148      	cbz	r0, 8004c8a <_dtoa_r+0x162>
 8004c76:	4650      	mov	r0, sl
 8004c78:	f7fb fc54 	bl	8000524 <__aeabi_i2d>
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	463b      	mov	r3, r7
 8004c80:	f7fb ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c84:	b908      	cbnz	r0, 8004c8a <_dtoa_r+0x162>
 8004c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c8a:	f1ba 0f16 	cmp.w	sl, #22
 8004c8e:	d859      	bhi.n	8004d44 <_dtoa_r+0x21c>
 8004c90:	4970      	ldr	r1, [pc, #448]	; (8004e54 <_dtoa_r+0x32c>)
 8004c92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c9e:	f7fb ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d050      	beq.n	8004d48 <_dtoa_r+0x220>
 8004ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004caa:	2300      	movs	r3, #0
 8004cac:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cb0:	1b5d      	subs	r5, r3, r5
 8004cb2:	f1b5 0801 	subs.w	r8, r5, #1
 8004cb6:	bf49      	itett	mi
 8004cb8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004cbc:	2300      	movpl	r3, #0
 8004cbe:	9305      	strmi	r3, [sp, #20]
 8004cc0:	f04f 0800 	movmi.w	r8, #0
 8004cc4:	bf58      	it	pl
 8004cc6:	9305      	strpl	r3, [sp, #20]
 8004cc8:	f1ba 0f00 	cmp.w	sl, #0
 8004ccc:	db3e      	blt.n	8004d4c <_dtoa_r+0x224>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	44d0      	add	r8, sl
 8004cd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004cd6:	9307      	str	r3, [sp, #28]
 8004cd8:	9b06      	ldr	r3, [sp, #24]
 8004cda:	2b09      	cmp	r3, #9
 8004cdc:	f200 8090 	bhi.w	8004e00 <_dtoa_r+0x2d8>
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	bfc4      	itt	gt
 8004ce4:	3b04      	subgt	r3, #4
 8004ce6:	9306      	strgt	r3, [sp, #24]
 8004ce8:	9b06      	ldr	r3, [sp, #24]
 8004cea:	f1a3 0302 	sub.w	r3, r3, #2
 8004cee:	bfcc      	ite	gt
 8004cf0:	2500      	movgt	r5, #0
 8004cf2:	2501      	movle	r5, #1
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	f200 808f 	bhi.w	8004e18 <_dtoa_r+0x2f0>
 8004cfa:	e8df f003 	tbb	[pc, r3]
 8004cfe:	7f7d      	.short	0x7f7d
 8004d00:	7131      	.short	0x7131
 8004d02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004d06:	441d      	add	r5, r3
 8004d08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d0c:	2820      	cmp	r0, #32
 8004d0e:	dd13      	ble.n	8004d38 <_dtoa_r+0x210>
 8004d10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d14:	9b00      	ldr	r3, [sp, #0]
 8004d16:	fa08 f800 	lsl.w	r8, r8, r0
 8004d1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d1e:	fa23 f000 	lsr.w	r0, r3, r0
 8004d22:	ea48 0000 	orr.w	r0, r8, r0
 8004d26:	f7fb fbed 	bl	8000504 <__aeabi_ui2d>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4682      	mov	sl, r0
 8004d2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004d32:	3d01      	subs	r5, #1
 8004d34:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d36:	e772      	b.n	8004c1e <_dtoa_r+0xf6>
 8004d38:	9b00      	ldr	r3, [sp, #0]
 8004d3a:	f1c0 0020 	rsb	r0, r0, #32
 8004d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d42:	e7f0      	b.n	8004d26 <_dtoa_r+0x1fe>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e7b1      	b.n	8004cac <_dtoa_r+0x184>
 8004d48:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d4a:	e7b0      	b.n	8004cae <_dtoa_r+0x186>
 8004d4c:	9b05      	ldr	r3, [sp, #20]
 8004d4e:	eba3 030a 	sub.w	r3, r3, sl
 8004d52:	9305      	str	r3, [sp, #20]
 8004d54:	f1ca 0300 	rsb	r3, sl, #0
 8004d58:	9307      	str	r3, [sp, #28]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d5e:	e7bb      	b.n	8004cd8 <_dtoa_r+0x1b0>
 8004d60:	2301      	movs	r3, #1
 8004d62:	930a      	str	r3, [sp, #40]	; 0x28
 8004d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	dd59      	ble.n	8004e1e <_dtoa_r+0x2f6>
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	4699      	mov	r9, r3
 8004d6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d70:	2200      	movs	r2, #0
 8004d72:	6072      	str	r2, [r6, #4]
 8004d74:	2204      	movs	r2, #4
 8004d76:	f102 0014 	add.w	r0, r2, #20
 8004d7a:	4298      	cmp	r0, r3
 8004d7c:	6871      	ldr	r1, [r6, #4]
 8004d7e:	d953      	bls.n	8004e28 <_dtoa_r+0x300>
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 fca1 	bl	80056c8 <_Balloc>
 8004d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d88:	6030      	str	r0, [r6, #0]
 8004d8a:	f1b9 0f0e 	cmp.w	r9, #14
 8004d8e:	f8d3 b000 	ldr.w	fp, [r3]
 8004d92:	f200 80e6 	bhi.w	8004f62 <_dtoa_r+0x43a>
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	f000 80e3 	beq.w	8004f62 <_dtoa_r+0x43a>
 8004d9c:	ed9d 7b00 	vldr	d7, [sp]
 8004da0:	f1ba 0f00 	cmp.w	sl, #0
 8004da4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004da8:	dd74      	ble.n	8004e94 <_dtoa_r+0x36c>
 8004daa:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <_dtoa_r+0x32c>)
 8004dac:	f00a 030f 	and.w	r3, sl, #15
 8004db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004db4:	ed93 7b00 	vldr	d7, [r3]
 8004db8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004dbc:	06f0      	lsls	r0, r6, #27
 8004dbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004dc2:	d565      	bpl.n	8004e90 <_dtoa_r+0x368>
 8004dc4:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <_dtoa_r+0x330>)
 8004dc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dce:	f7fb fd3d 	bl	800084c <__aeabi_ddiv>
 8004dd2:	e9cd 0100 	strd	r0, r1, [sp]
 8004dd6:	f006 060f 	and.w	r6, r6, #15
 8004dda:	2503      	movs	r5, #3
 8004ddc:	4f1e      	ldr	r7, [pc, #120]	; (8004e58 <_dtoa_r+0x330>)
 8004dde:	e04c      	b.n	8004e7a <_dtoa_r+0x352>
 8004de0:	2301      	movs	r3, #1
 8004de2:	930a      	str	r3, [sp, #40]	; 0x28
 8004de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004de6:	4453      	add	r3, sl
 8004de8:	f103 0901 	add.w	r9, r3, #1
 8004dec:	9302      	str	r3, [sp, #8]
 8004dee:	464b      	mov	r3, r9
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bfb8      	it	lt
 8004df4:	2301      	movlt	r3, #1
 8004df6:	e7ba      	b.n	8004d6e <_dtoa_r+0x246>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e7b2      	b.n	8004d62 <_dtoa_r+0x23a>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e7f0      	b.n	8004de2 <_dtoa_r+0x2ba>
 8004e00:	2501      	movs	r5, #1
 8004e02:	2300      	movs	r3, #0
 8004e04:	9306      	str	r3, [sp, #24]
 8004e06:	950a      	str	r5, [sp, #40]	; 0x28
 8004e08:	f04f 33ff 	mov.w	r3, #4294967295
 8004e0c:	9302      	str	r3, [sp, #8]
 8004e0e:	4699      	mov	r9, r3
 8004e10:	2200      	movs	r2, #0
 8004e12:	2312      	movs	r3, #18
 8004e14:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e16:	e7aa      	b.n	8004d6e <_dtoa_r+0x246>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e1c:	e7f4      	b.n	8004e08 <_dtoa_r+0x2e0>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	4699      	mov	r9, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	e7f5      	b.n	8004e14 <_dtoa_r+0x2ec>
 8004e28:	3101      	adds	r1, #1
 8004e2a:	6071      	str	r1, [r6, #4]
 8004e2c:	0052      	lsls	r2, r2, #1
 8004e2e:	e7a2      	b.n	8004d76 <_dtoa_r+0x24e>
 8004e30:	636f4361 	.word	0x636f4361
 8004e34:	3fd287a7 	.word	0x3fd287a7
 8004e38:	8b60c8b3 	.word	0x8b60c8b3
 8004e3c:	3fc68a28 	.word	0x3fc68a28
 8004e40:	509f79fb 	.word	0x509f79fb
 8004e44:	3fd34413 	.word	0x3fd34413
 8004e48:	7ff00000 	.word	0x7ff00000
 8004e4c:	08006107 	.word	0x08006107
 8004e50:	3ff80000 	.word	0x3ff80000
 8004e54:	08006260 	.word	0x08006260
 8004e58:	08006238 	.word	0x08006238
 8004e5c:	08006234 	.word	0x08006234
 8004e60:	07f1      	lsls	r1, r6, #31
 8004e62:	d508      	bpl.n	8004e76 <_dtoa_r+0x34e>
 8004e64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6c:	f7fb fbc4 	bl	80005f8 <__aeabi_dmul>
 8004e70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e74:	3501      	adds	r5, #1
 8004e76:	1076      	asrs	r6, r6, #1
 8004e78:	3708      	adds	r7, #8
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	d1f0      	bne.n	8004e60 <_dtoa_r+0x338>
 8004e7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e86:	f7fb fce1 	bl	800084c <__aeabi_ddiv>
 8004e8a:	e9cd 0100 	strd	r0, r1, [sp]
 8004e8e:	e01a      	b.n	8004ec6 <_dtoa_r+0x39e>
 8004e90:	2502      	movs	r5, #2
 8004e92:	e7a3      	b.n	8004ddc <_dtoa_r+0x2b4>
 8004e94:	f000 80a0 	beq.w	8004fd8 <_dtoa_r+0x4b0>
 8004e98:	f1ca 0600 	rsb	r6, sl, #0
 8004e9c:	4b9f      	ldr	r3, [pc, #636]	; (800511c <_dtoa_r+0x5f4>)
 8004e9e:	4fa0      	ldr	r7, [pc, #640]	; (8005120 <_dtoa_r+0x5f8>)
 8004ea0:	f006 020f 	and.w	r2, r6, #15
 8004ea4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eb0:	f7fb fba2 	bl	80005f8 <__aeabi_dmul>
 8004eb4:	e9cd 0100 	strd	r0, r1, [sp]
 8004eb8:	1136      	asrs	r6, r6, #4
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2502      	movs	r5, #2
 8004ebe:	2e00      	cmp	r6, #0
 8004ec0:	d17f      	bne.n	8004fc2 <_dtoa_r+0x49a>
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e1      	bne.n	8004e8a <_dtoa_r+0x362>
 8004ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8087 	beq.w	8004fdc <_dtoa_r+0x4b4>
 8004ece:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b93      	ldr	r3, [pc, #588]	; (8005124 <_dtoa_r+0x5fc>)
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	4639      	mov	r1, r7
 8004eda:	f7fb fdff 	bl	8000adc <__aeabi_dcmplt>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d07c      	beq.n	8004fdc <_dtoa_r+0x4b4>
 8004ee2:	f1b9 0f00 	cmp.w	r9, #0
 8004ee6:	d079      	beq.n	8004fdc <_dtoa_r+0x4b4>
 8004ee8:	9b02      	ldr	r3, [sp, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	dd35      	ble.n	8004f5a <_dtoa_r+0x432>
 8004eee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ef2:	9308      	str	r3, [sp, #32]
 8004ef4:	4639      	mov	r1, r7
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4b8b      	ldr	r3, [pc, #556]	; (8005128 <_dtoa_r+0x600>)
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7fb fb7c 	bl	80005f8 <__aeabi_dmul>
 8004f00:	e9cd 0100 	strd	r0, r1, [sp]
 8004f04:	9f02      	ldr	r7, [sp, #8]
 8004f06:	3501      	adds	r5, #1
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f7fb fb0b 	bl	8000524 <__aeabi_i2d>
 8004f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f12:	f7fb fb71 	bl	80005f8 <__aeabi_dmul>
 8004f16:	2200      	movs	r2, #0
 8004f18:	4b84      	ldr	r3, [pc, #528]	; (800512c <_dtoa_r+0x604>)
 8004f1a:	f7fb f9b7 	bl	800028c <__adddf3>
 8004f1e:	4605      	mov	r5, r0
 8004f20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	d15d      	bne.n	8004fe4 <_dtoa_r+0x4bc>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4b81      	ldr	r3, [pc, #516]	; (8005130 <_dtoa_r+0x608>)
 8004f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f30:	f7fb f9aa 	bl	8000288 <__aeabi_dsub>
 8004f34:	462a      	mov	r2, r5
 8004f36:	4633      	mov	r3, r6
 8004f38:	e9cd 0100 	strd	r0, r1, [sp]
 8004f3c:	f7fb fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f040 8288 	bne.w	8005456 <_dtoa_r+0x92e>
 8004f46:	462a      	mov	r2, r5
 8004f48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f50:	f7fb fdc4 	bl	8000adc <__aeabi_dcmplt>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f040 827c 	bne.w	8005452 <_dtoa_r+0x92a>
 8004f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f5e:	e9cd 2300 	strd	r2, r3, [sp]
 8004f62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f2c0 8150 	blt.w	800520a <_dtoa_r+0x6e2>
 8004f6a:	f1ba 0f0e 	cmp.w	sl, #14
 8004f6e:	f300 814c 	bgt.w	800520a <_dtoa_r+0x6e2>
 8004f72:	4b6a      	ldr	r3, [pc, #424]	; (800511c <_dtoa_r+0x5f4>)
 8004f74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f78:	ed93 7b00 	vldr	d7, [r3]
 8004f7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f84:	f280 80d8 	bge.w	8005138 <_dtoa_r+0x610>
 8004f88:	f1b9 0f00 	cmp.w	r9, #0
 8004f8c:	f300 80d4 	bgt.w	8005138 <_dtoa_r+0x610>
 8004f90:	f040 825e 	bne.w	8005450 <_dtoa_r+0x928>
 8004f94:	2200      	movs	r2, #0
 8004f96:	4b66      	ldr	r3, [pc, #408]	; (8005130 <_dtoa_r+0x608>)
 8004f98:	ec51 0b17 	vmov	r0, r1, d7
 8004f9c:	f7fb fb2c 	bl	80005f8 <__aeabi_dmul>
 8004fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fa4:	f7fb fdae 	bl	8000b04 <__aeabi_dcmpge>
 8004fa8:	464f      	mov	r7, r9
 8004faa:	464e      	mov	r6, r9
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 8234 	bne.w	800541a <_dtoa_r+0x8f2>
 8004fb2:	2331      	movs	r3, #49	; 0x31
 8004fb4:	f10b 0501 	add.w	r5, fp, #1
 8004fb8:	f88b 3000 	strb.w	r3, [fp]
 8004fbc:	f10a 0a01 	add.w	sl, sl, #1
 8004fc0:	e22f      	b.n	8005422 <_dtoa_r+0x8fa>
 8004fc2:	07f2      	lsls	r2, r6, #31
 8004fc4:	d505      	bpl.n	8004fd2 <_dtoa_r+0x4aa>
 8004fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fca:	f7fb fb15 	bl	80005f8 <__aeabi_dmul>
 8004fce:	3501      	adds	r5, #1
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	1076      	asrs	r6, r6, #1
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	e772      	b.n	8004ebe <_dtoa_r+0x396>
 8004fd8:	2502      	movs	r5, #2
 8004fda:	e774      	b.n	8004ec6 <_dtoa_r+0x39e>
 8004fdc:	f8cd a020 	str.w	sl, [sp, #32]
 8004fe0:	464f      	mov	r7, r9
 8004fe2:	e791      	b.n	8004f08 <_dtoa_r+0x3e0>
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <_dtoa_r+0x5f4>)
 8004fe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d047      	beq.n	8005084 <_dtoa_r+0x55c>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	494e      	ldr	r1, [pc, #312]	; (8005134 <_dtoa_r+0x60c>)
 8004ffc:	f7fb fc26 	bl	800084c <__aeabi_ddiv>
 8005000:	462a      	mov	r2, r5
 8005002:	4633      	mov	r3, r6
 8005004:	f7fb f940 	bl	8000288 <__aeabi_dsub>
 8005008:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800500c:	465d      	mov	r5, fp
 800500e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005012:	f7fb fda1 	bl	8000b58 <__aeabi_d2iz>
 8005016:	4606      	mov	r6, r0
 8005018:	f7fb fa84 	bl	8000524 <__aeabi_i2d>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005024:	f7fb f930 	bl	8000288 <__aeabi_dsub>
 8005028:	3630      	adds	r6, #48	; 0x30
 800502a:	f805 6b01 	strb.w	r6, [r5], #1
 800502e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005032:	e9cd 0100 	strd	r0, r1, [sp]
 8005036:	f7fb fd51 	bl	8000adc <__aeabi_dcmplt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d163      	bne.n	8005106 <_dtoa_r+0x5de>
 800503e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005042:	2000      	movs	r0, #0
 8005044:	4937      	ldr	r1, [pc, #220]	; (8005124 <_dtoa_r+0x5fc>)
 8005046:	f7fb f91f 	bl	8000288 <__aeabi_dsub>
 800504a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800504e:	f7fb fd45 	bl	8000adc <__aeabi_dcmplt>
 8005052:	2800      	cmp	r0, #0
 8005054:	f040 80b7 	bne.w	80051c6 <_dtoa_r+0x69e>
 8005058:	eba5 030b 	sub.w	r3, r5, fp
 800505c:	429f      	cmp	r7, r3
 800505e:	f77f af7c 	ble.w	8004f5a <_dtoa_r+0x432>
 8005062:	2200      	movs	r2, #0
 8005064:	4b30      	ldr	r3, [pc, #192]	; (8005128 <_dtoa_r+0x600>)
 8005066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800506a:	f7fb fac5 	bl	80005f8 <__aeabi_dmul>
 800506e:	2200      	movs	r2, #0
 8005070:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005074:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <_dtoa_r+0x600>)
 8005076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800507a:	f7fb fabd 	bl	80005f8 <__aeabi_dmul>
 800507e:	e9cd 0100 	strd	r0, r1, [sp]
 8005082:	e7c4      	b.n	800500e <_dtoa_r+0x4e6>
 8005084:	462a      	mov	r2, r5
 8005086:	4633      	mov	r3, r6
 8005088:	f7fb fab6 	bl	80005f8 <__aeabi_dmul>
 800508c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005090:	eb0b 0507 	add.w	r5, fp, r7
 8005094:	465e      	mov	r6, fp
 8005096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800509a:	f7fb fd5d 	bl	8000b58 <__aeabi_d2iz>
 800509e:	4607      	mov	r7, r0
 80050a0:	f7fb fa40 	bl	8000524 <__aeabi_i2d>
 80050a4:	3730      	adds	r7, #48	; 0x30
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ae:	f7fb f8eb 	bl	8000288 <__aeabi_dsub>
 80050b2:	f806 7b01 	strb.w	r7, [r6], #1
 80050b6:	42ae      	cmp	r6, r5
 80050b8:	e9cd 0100 	strd	r0, r1, [sp]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	d126      	bne.n	8005110 <_dtoa_r+0x5e8>
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <_dtoa_r+0x60c>)
 80050c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c8:	f7fb f8e0 	bl	800028c <__adddf3>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050d4:	f7fb fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d174      	bne.n	80051c6 <_dtoa_r+0x69e>
 80050dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050e0:	2000      	movs	r0, #0
 80050e2:	4914      	ldr	r1, [pc, #80]	; (8005134 <_dtoa_r+0x60c>)
 80050e4:	f7fb f8d0 	bl	8000288 <__aeabi_dsub>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050f0:	f7fb fcf4 	bl	8000adc <__aeabi_dcmplt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f43f af30 	beq.w	8004f5a <_dtoa_r+0x432>
 80050fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050fe:	2b30      	cmp	r3, #48	; 0x30
 8005100:	f105 32ff 	add.w	r2, r5, #4294967295
 8005104:	d002      	beq.n	800510c <_dtoa_r+0x5e4>
 8005106:	f8dd a020 	ldr.w	sl, [sp, #32]
 800510a:	e04a      	b.n	80051a2 <_dtoa_r+0x67a>
 800510c:	4615      	mov	r5, r2
 800510e:	e7f4      	b.n	80050fa <_dtoa_r+0x5d2>
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <_dtoa_r+0x600>)
 8005112:	f7fb fa71 	bl	80005f8 <__aeabi_dmul>
 8005116:	e9cd 0100 	strd	r0, r1, [sp]
 800511a:	e7bc      	b.n	8005096 <_dtoa_r+0x56e>
 800511c:	08006260 	.word	0x08006260
 8005120:	08006238 	.word	0x08006238
 8005124:	3ff00000 	.word	0x3ff00000
 8005128:	40240000 	.word	0x40240000
 800512c:	401c0000 	.word	0x401c0000
 8005130:	40140000 	.word	0x40140000
 8005134:	3fe00000 	.word	0x3fe00000
 8005138:	e9dd 6700 	ldrd	r6, r7, [sp]
 800513c:	465d      	mov	r5, fp
 800513e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005142:	4630      	mov	r0, r6
 8005144:	4639      	mov	r1, r7
 8005146:	f7fb fb81 	bl	800084c <__aeabi_ddiv>
 800514a:	f7fb fd05 	bl	8000b58 <__aeabi_d2iz>
 800514e:	4680      	mov	r8, r0
 8005150:	f7fb f9e8 	bl	8000524 <__aeabi_i2d>
 8005154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005158:	f7fb fa4e 	bl	80005f8 <__aeabi_dmul>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005168:	f7fb f88e 	bl	8000288 <__aeabi_dsub>
 800516c:	f805 6b01 	strb.w	r6, [r5], #1
 8005170:	eba5 060b 	sub.w	r6, r5, fp
 8005174:	45b1      	cmp	r9, r6
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	d139      	bne.n	80051f0 <_dtoa_r+0x6c8>
 800517c:	f7fb f886 	bl	800028c <__adddf3>
 8005180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005184:	4606      	mov	r6, r0
 8005186:	460f      	mov	r7, r1
 8005188:	f7fb fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800518c:	b9c8      	cbnz	r0, 80051c2 <_dtoa_r+0x69a>
 800518e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005192:	4630      	mov	r0, r6
 8005194:	4639      	mov	r1, r7
 8005196:	f7fb fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800519a:	b110      	cbz	r0, 80051a2 <_dtoa_r+0x67a>
 800519c:	f018 0f01 	tst.w	r8, #1
 80051a0:	d10f      	bne.n	80051c2 <_dtoa_r+0x69a>
 80051a2:	9904      	ldr	r1, [sp, #16]
 80051a4:	4620      	mov	r0, r4
 80051a6:	f000 fac3 	bl	8005730 <_Bfree>
 80051aa:	2300      	movs	r3, #0
 80051ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051ae:	702b      	strb	r3, [r5, #0]
 80051b0:	f10a 0301 	add.w	r3, sl, #1
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8241 	beq.w	8005640 <_dtoa_r+0xb18>
 80051be:	601d      	str	r5, [r3, #0]
 80051c0:	e23e      	b.n	8005640 <_dtoa_r+0xb18>
 80051c2:	f8cd a020 	str.w	sl, [sp, #32]
 80051c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051ca:	2a39      	cmp	r2, #57	; 0x39
 80051cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80051d0:	d108      	bne.n	80051e4 <_dtoa_r+0x6bc>
 80051d2:	459b      	cmp	fp, r3
 80051d4:	d10a      	bne.n	80051ec <_dtoa_r+0x6c4>
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	3301      	adds	r3, #1
 80051da:	9308      	str	r3, [sp, #32]
 80051dc:	2330      	movs	r3, #48	; 0x30
 80051de:	f88b 3000 	strb.w	r3, [fp]
 80051e2:	465b      	mov	r3, fp
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	3201      	adds	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	e78c      	b.n	8005106 <_dtoa_r+0x5de>
 80051ec:	461d      	mov	r5, r3
 80051ee:	e7ea      	b.n	80051c6 <_dtoa_r+0x69e>
 80051f0:	2200      	movs	r2, #0
 80051f2:	4b9b      	ldr	r3, [pc, #620]	; (8005460 <_dtoa_r+0x938>)
 80051f4:	f7fb fa00 	bl	80005f8 <__aeabi_dmul>
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	4606      	mov	r6, r0
 80051fe:	460f      	mov	r7, r1
 8005200:	f7fb fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8005204:	2800      	cmp	r0, #0
 8005206:	d09a      	beq.n	800513e <_dtoa_r+0x616>
 8005208:	e7cb      	b.n	80051a2 <_dtoa_r+0x67a>
 800520a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520c:	2a00      	cmp	r2, #0
 800520e:	f000 808b 	beq.w	8005328 <_dtoa_r+0x800>
 8005212:	9a06      	ldr	r2, [sp, #24]
 8005214:	2a01      	cmp	r2, #1
 8005216:	dc6e      	bgt.n	80052f6 <_dtoa_r+0x7ce>
 8005218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800521a:	2a00      	cmp	r2, #0
 800521c:	d067      	beq.n	80052ee <_dtoa_r+0x7c6>
 800521e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005222:	9f07      	ldr	r7, [sp, #28]
 8005224:	9d05      	ldr	r5, [sp, #20]
 8005226:	9a05      	ldr	r2, [sp, #20]
 8005228:	2101      	movs	r1, #1
 800522a:	441a      	add	r2, r3
 800522c:	4620      	mov	r0, r4
 800522e:	9205      	str	r2, [sp, #20]
 8005230:	4498      	add	r8, r3
 8005232:	f000 fb1d 	bl	8005870 <__i2b>
 8005236:	4606      	mov	r6, r0
 8005238:	2d00      	cmp	r5, #0
 800523a:	dd0c      	ble.n	8005256 <_dtoa_r+0x72e>
 800523c:	f1b8 0f00 	cmp.w	r8, #0
 8005240:	dd09      	ble.n	8005256 <_dtoa_r+0x72e>
 8005242:	4545      	cmp	r5, r8
 8005244:	9a05      	ldr	r2, [sp, #20]
 8005246:	462b      	mov	r3, r5
 8005248:	bfa8      	it	ge
 800524a:	4643      	movge	r3, r8
 800524c:	1ad2      	subs	r2, r2, r3
 800524e:	9205      	str	r2, [sp, #20]
 8005250:	1aed      	subs	r5, r5, r3
 8005252:	eba8 0803 	sub.w	r8, r8, r3
 8005256:	9b07      	ldr	r3, [sp, #28]
 8005258:	b1eb      	cbz	r3, 8005296 <_dtoa_r+0x76e>
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d067      	beq.n	8005330 <_dtoa_r+0x808>
 8005260:	b18f      	cbz	r7, 8005286 <_dtoa_r+0x75e>
 8005262:	4631      	mov	r1, r6
 8005264:	463a      	mov	r2, r7
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fba2 	bl	80059b0 <__pow5mult>
 800526c:	9a04      	ldr	r2, [sp, #16]
 800526e:	4601      	mov	r1, r0
 8005270:	4606      	mov	r6, r0
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fb05 	bl	8005882 <__multiply>
 8005278:	9904      	ldr	r1, [sp, #16]
 800527a:	9008      	str	r0, [sp, #32]
 800527c:	4620      	mov	r0, r4
 800527e:	f000 fa57 	bl	8005730 <_Bfree>
 8005282:	9b08      	ldr	r3, [sp, #32]
 8005284:	9304      	str	r3, [sp, #16]
 8005286:	9b07      	ldr	r3, [sp, #28]
 8005288:	1bda      	subs	r2, r3, r7
 800528a:	d004      	beq.n	8005296 <_dtoa_r+0x76e>
 800528c:	9904      	ldr	r1, [sp, #16]
 800528e:	4620      	mov	r0, r4
 8005290:	f000 fb8e 	bl	80059b0 <__pow5mult>
 8005294:	9004      	str	r0, [sp, #16]
 8005296:	2101      	movs	r1, #1
 8005298:	4620      	mov	r0, r4
 800529a:	f000 fae9 	bl	8005870 <__i2b>
 800529e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052a0:	4607      	mov	r7, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 81d0 	beq.w	8005648 <_dtoa_r+0xb20>
 80052a8:	461a      	mov	r2, r3
 80052aa:	4601      	mov	r1, r0
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 fb7f 	bl	80059b0 <__pow5mult>
 80052b2:	9b06      	ldr	r3, [sp, #24]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	4607      	mov	r7, r0
 80052b8:	dc40      	bgt.n	800533c <_dtoa_r+0x814>
 80052ba:	9b00      	ldr	r3, [sp, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d139      	bne.n	8005334 <_dtoa_r+0x80c>
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d136      	bne.n	8005338 <_dtoa_r+0x810>
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d0:	0d1b      	lsrs	r3, r3, #20
 80052d2:	051b      	lsls	r3, r3, #20
 80052d4:	b12b      	cbz	r3, 80052e2 <_dtoa_r+0x7ba>
 80052d6:	9b05      	ldr	r3, [sp, #20]
 80052d8:	3301      	adds	r3, #1
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	f108 0801 	add.w	r8, r8, #1
 80052e0:	2301      	movs	r3, #1
 80052e2:	9307      	str	r3, [sp, #28]
 80052e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12a      	bne.n	8005340 <_dtoa_r+0x818>
 80052ea:	2001      	movs	r0, #1
 80052ec:	e030      	b.n	8005350 <_dtoa_r+0x828>
 80052ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80052f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052f4:	e795      	b.n	8005222 <_dtoa_r+0x6fa>
 80052f6:	9b07      	ldr	r3, [sp, #28]
 80052f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80052fc:	42bb      	cmp	r3, r7
 80052fe:	bfbf      	itttt	lt
 8005300:	9b07      	ldrlt	r3, [sp, #28]
 8005302:	9707      	strlt	r7, [sp, #28]
 8005304:	1afa      	sublt	r2, r7, r3
 8005306:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005308:	bfbb      	ittet	lt
 800530a:	189b      	addlt	r3, r3, r2
 800530c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800530e:	1bdf      	subge	r7, r3, r7
 8005310:	2700      	movlt	r7, #0
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	bfb5      	itete	lt
 8005318:	9b05      	ldrlt	r3, [sp, #20]
 800531a:	9d05      	ldrge	r5, [sp, #20]
 800531c:	eba3 0509 	sublt.w	r5, r3, r9
 8005320:	464b      	movge	r3, r9
 8005322:	bfb8      	it	lt
 8005324:	2300      	movlt	r3, #0
 8005326:	e77e      	b.n	8005226 <_dtoa_r+0x6fe>
 8005328:	9f07      	ldr	r7, [sp, #28]
 800532a:	9d05      	ldr	r5, [sp, #20]
 800532c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800532e:	e783      	b.n	8005238 <_dtoa_r+0x710>
 8005330:	9a07      	ldr	r2, [sp, #28]
 8005332:	e7ab      	b.n	800528c <_dtoa_r+0x764>
 8005334:	2300      	movs	r3, #0
 8005336:	e7d4      	b.n	80052e2 <_dtoa_r+0x7ba>
 8005338:	9b00      	ldr	r3, [sp, #0]
 800533a:	e7d2      	b.n	80052e2 <_dtoa_r+0x7ba>
 800533c:	2300      	movs	r3, #0
 800533e:	9307      	str	r3, [sp, #28]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005346:	6918      	ldr	r0, [r3, #16]
 8005348:	f000 fa44 	bl	80057d4 <__hi0bits>
 800534c:	f1c0 0020 	rsb	r0, r0, #32
 8005350:	4440      	add	r0, r8
 8005352:	f010 001f 	ands.w	r0, r0, #31
 8005356:	d047      	beq.n	80053e8 <_dtoa_r+0x8c0>
 8005358:	f1c0 0320 	rsb	r3, r0, #32
 800535c:	2b04      	cmp	r3, #4
 800535e:	dd3b      	ble.n	80053d8 <_dtoa_r+0x8b0>
 8005360:	9b05      	ldr	r3, [sp, #20]
 8005362:	f1c0 001c 	rsb	r0, r0, #28
 8005366:	4403      	add	r3, r0
 8005368:	9305      	str	r3, [sp, #20]
 800536a:	4405      	add	r5, r0
 800536c:	4480      	add	r8, r0
 800536e:	9b05      	ldr	r3, [sp, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dd05      	ble.n	8005380 <_dtoa_r+0x858>
 8005374:	461a      	mov	r2, r3
 8005376:	9904      	ldr	r1, [sp, #16]
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fb67 	bl	8005a4c <__lshift>
 800537e:	9004      	str	r0, [sp, #16]
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	dd05      	ble.n	8005392 <_dtoa_r+0x86a>
 8005386:	4639      	mov	r1, r7
 8005388:	4642      	mov	r2, r8
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fb5e 	bl	8005a4c <__lshift>
 8005390:	4607      	mov	r7, r0
 8005392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005394:	b353      	cbz	r3, 80053ec <_dtoa_r+0x8c4>
 8005396:	4639      	mov	r1, r7
 8005398:	9804      	ldr	r0, [sp, #16]
 800539a:	f000 fbab 	bl	8005af4 <__mcmp>
 800539e:	2800      	cmp	r0, #0
 80053a0:	da24      	bge.n	80053ec <_dtoa_r+0x8c4>
 80053a2:	2300      	movs	r3, #0
 80053a4:	220a      	movs	r2, #10
 80053a6:	9904      	ldr	r1, [sp, #16]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f9d8 	bl	800575e <__multadd>
 80053ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b0:	9004      	str	r0, [sp, #16]
 80053b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 814d 	beq.w	8005656 <_dtoa_r+0xb2e>
 80053bc:	2300      	movs	r3, #0
 80053be:	4631      	mov	r1, r6
 80053c0:	220a      	movs	r2, #10
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f9cb 	bl	800575e <__multadd>
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	4606      	mov	r6, r0
 80053ce:	dc4f      	bgt.n	8005470 <_dtoa_r+0x948>
 80053d0:	9b06      	ldr	r3, [sp, #24]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	dd4c      	ble.n	8005470 <_dtoa_r+0x948>
 80053d6:	e011      	b.n	80053fc <_dtoa_r+0x8d4>
 80053d8:	d0c9      	beq.n	800536e <_dtoa_r+0x846>
 80053da:	9a05      	ldr	r2, [sp, #20]
 80053dc:	331c      	adds	r3, #28
 80053de:	441a      	add	r2, r3
 80053e0:	9205      	str	r2, [sp, #20]
 80053e2:	441d      	add	r5, r3
 80053e4:	4498      	add	r8, r3
 80053e6:	e7c2      	b.n	800536e <_dtoa_r+0x846>
 80053e8:	4603      	mov	r3, r0
 80053ea:	e7f6      	b.n	80053da <_dtoa_r+0x8b2>
 80053ec:	f1b9 0f00 	cmp.w	r9, #0
 80053f0:	dc38      	bgt.n	8005464 <_dtoa_r+0x93c>
 80053f2:	9b06      	ldr	r3, [sp, #24]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	dd35      	ble.n	8005464 <_dtoa_r+0x93c>
 80053f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	b963      	cbnz	r3, 800541a <_dtoa_r+0x8f2>
 8005400:	4639      	mov	r1, r7
 8005402:	2205      	movs	r2, #5
 8005404:	4620      	mov	r0, r4
 8005406:	f000 f9aa 	bl	800575e <__multadd>
 800540a:	4601      	mov	r1, r0
 800540c:	4607      	mov	r7, r0
 800540e:	9804      	ldr	r0, [sp, #16]
 8005410:	f000 fb70 	bl	8005af4 <__mcmp>
 8005414:	2800      	cmp	r0, #0
 8005416:	f73f adcc 	bgt.w	8004fb2 <_dtoa_r+0x48a>
 800541a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541c:	465d      	mov	r5, fp
 800541e:	ea6f 0a03 	mvn.w	sl, r3
 8005422:	f04f 0900 	mov.w	r9, #0
 8005426:	4639      	mov	r1, r7
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f981 	bl	8005730 <_Bfree>
 800542e:	2e00      	cmp	r6, #0
 8005430:	f43f aeb7 	beq.w	80051a2 <_dtoa_r+0x67a>
 8005434:	f1b9 0f00 	cmp.w	r9, #0
 8005438:	d005      	beq.n	8005446 <_dtoa_r+0x91e>
 800543a:	45b1      	cmp	r9, r6
 800543c:	d003      	beq.n	8005446 <_dtoa_r+0x91e>
 800543e:	4649      	mov	r1, r9
 8005440:	4620      	mov	r0, r4
 8005442:	f000 f975 	bl	8005730 <_Bfree>
 8005446:	4631      	mov	r1, r6
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f971 	bl	8005730 <_Bfree>
 800544e:	e6a8      	b.n	80051a2 <_dtoa_r+0x67a>
 8005450:	2700      	movs	r7, #0
 8005452:	463e      	mov	r6, r7
 8005454:	e7e1      	b.n	800541a <_dtoa_r+0x8f2>
 8005456:	f8dd a020 	ldr.w	sl, [sp, #32]
 800545a:	463e      	mov	r6, r7
 800545c:	e5a9      	b.n	8004fb2 <_dtoa_r+0x48a>
 800545e:	bf00      	nop
 8005460:	40240000 	.word	0x40240000
 8005464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005466:	f8cd 9008 	str.w	r9, [sp, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80fa 	beq.w	8005664 <_dtoa_r+0xb3c>
 8005470:	2d00      	cmp	r5, #0
 8005472:	dd05      	ble.n	8005480 <_dtoa_r+0x958>
 8005474:	4631      	mov	r1, r6
 8005476:	462a      	mov	r2, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fae7 	bl	8005a4c <__lshift>
 800547e:	4606      	mov	r6, r0
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d04c      	beq.n	8005520 <_dtoa_r+0x9f8>
 8005486:	6871      	ldr	r1, [r6, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f91d 	bl	80056c8 <_Balloc>
 800548e:	6932      	ldr	r2, [r6, #16]
 8005490:	3202      	adds	r2, #2
 8005492:	4605      	mov	r5, r0
 8005494:	0092      	lsls	r2, r2, #2
 8005496:	f106 010c 	add.w	r1, r6, #12
 800549a:	300c      	adds	r0, #12
 800549c:	f7fe fd4e 	bl	8003f3c <memcpy>
 80054a0:	2201      	movs	r2, #1
 80054a2:	4629      	mov	r1, r5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fad1 	bl	8005a4c <__lshift>
 80054aa:	9b00      	ldr	r3, [sp, #0]
 80054ac:	f8cd b014 	str.w	fp, [sp, #20]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	46b1      	mov	r9, r6
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	4606      	mov	r6, r0
 80054ba:	4639      	mov	r1, r7
 80054bc:	9804      	ldr	r0, [sp, #16]
 80054be:	f7ff faa4 	bl	8004a0a <quorem>
 80054c2:	4649      	mov	r1, r9
 80054c4:	4605      	mov	r5, r0
 80054c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054ca:	9804      	ldr	r0, [sp, #16]
 80054cc:	f000 fb12 	bl	8005af4 <__mcmp>
 80054d0:	4632      	mov	r2, r6
 80054d2:	9000      	str	r0, [sp, #0]
 80054d4:	4639      	mov	r1, r7
 80054d6:	4620      	mov	r0, r4
 80054d8:	f000 fb26 	bl	8005b28 <__mdiff>
 80054dc:	68c3      	ldr	r3, [r0, #12]
 80054de:	4602      	mov	r2, r0
 80054e0:	bb03      	cbnz	r3, 8005524 <_dtoa_r+0x9fc>
 80054e2:	4601      	mov	r1, r0
 80054e4:	9008      	str	r0, [sp, #32]
 80054e6:	9804      	ldr	r0, [sp, #16]
 80054e8:	f000 fb04 	bl	8005af4 <__mcmp>
 80054ec:	9a08      	ldr	r2, [sp, #32]
 80054ee:	4603      	mov	r3, r0
 80054f0:	4611      	mov	r1, r2
 80054f2:	4620      	mov	r0, r4
 80054f4:	9308      	str	r3, [sp, #32]
 80054f6:	f000 f91b 	bl	8005730 <_Bfree>
 80054fa:	9b08      	ldr	r3, [sp, #32]
 80054fc:	b9a3      	cbnz	r3, 8005528 <_dtoa_r+0xa00>
 80054fe:	9a06      	ldr	r2, [sp, #24]
 8005500:	b992      	cbnz	r2, 8005528 <_dtoa_r+0xa00>
 8005502:	9a07      	ldr	r2, [sp, #28]
 8005504:	b982      	cbnz	r2, 8005528 <_dtoa_r+0xa00>
 8005506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800550a:	d029      	beq.n	8005560 <_dtoa_r+0xa38>
 800550c:	9b00      	ldr	r3, [sp, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	dd01      	ble.n	8005516 <_dtoa_r+0x9ee>
 8005512:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005516:	9b05      	ldr	r3, [sp, #20]
 8005518:	1c5d      	adds	r5, r3, #1
 800551a:	f883 8000 	strb.w	r8, [r3]
 800551e:	e782      	b.n	8005426 <_dtoa_r+0x8fe>
 8005520:	4630      	mov	r0, r6
 8005522:	e7c2      	b.n	80054aa <_dtoa_r+0x982>
 8005524:	2301      	movs	r3, #1
 8005526:	e7e3      	b.n	80054f0 <_dtoa_r+0x9c8>
 8005528:	9a00      	ldr	r2, [sp, #0]
 800552a:	2a00      	cmp	r2, #0
 800552c:	db04      	blt.n	8005538 <_dtoa_r+0xa10>
 800552e:	d125      	bne.n	800557c <_dtoa_r+0xa54>
 8005530:	9a06      	ldr	r2, [sp, #24]
 8005532:	bb1a      	cbnz	r2, 800557c <_dtoa_r+0xa54>
 8005534:	9a07      	ldr	r2, [sp, #28]
 8005536:	bb0a      	cbnz	r2, 800557c <_dtoa_r+0xa54>
 8005538:	2b00      	cmp	r3, #0
 800553a:	ddec      	ble.n	8005516 <_dtoa_r+0x9ee>
 800553c:	2201      	movs	r2, #1
 800553e:	9904      	ldr	r1, [sp, #16]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fa83 	bl	8005a4c <__lshift>
 8005546:	4639      	mov	r1, r7
 8005548:	9004      	str	r0, [sp, #16]
 800554a:	f000 fad3 	bl	8005af4 <__mcmp>
 800554e:	2800      	cmp	r0, #0
 8005550:	dc03      	bgt.n	800555a <_dtoa_r+0xa32>
 8005552:	d1e0      	bne.n	8005516 <_dtoa_r+0x9ee>
 8005554:	f018 0f01 	tst.w	r8, #1
 8005558:	d0dd      	beq.n	8005516 <_dtoa_r+0x9ee>
 800555a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800555e:	d1d8      	bne.n	8005512 <_dtoa_r+0x9ea>
 8005560:	9b05      	ldr	r3, [sp, #20]
 8005562:	9a05      	ldr	r2, [sp, #20]
 8005564:	1c5d      	adds	r5, r3, #1
 8005566:	2339      	movs	r3, #57	; 0x39
 8005568:	7013      	strb	r3, [r2, #0]
 800556a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800556e:	2b39      	cmp	r3, #57	; 0x39
 8005570:	f105 32ff 	add.w	r2, r5, #4294967295
 8005574:	d04f      	beq.n	8005616 <_dtoa_r+0xaee>
 8005576:	3301      	adds	r3, #1
 8005578:	7013      	strb	r3, [r2, #0]
 800557a:	e754      	b.n	8005426 <_dtoa_r+0x8fe>
 800557c:	9a05      	ldr	r2, [sp, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f102 0501 	add.w	r5, r2, #1
 8005584:	dd06      	ble.n	8005594 <_dtoa_r+0xa6c>
 8005586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800558a:	d0e9      	beq.n	8005560 <_dtoa_r+0xa38>
 800558c:	f108 0801 	add.w	r8, r8, #1
 8005590:	9b05      	ldr	r3, [sp, #20]
 8005592:	e7c2      	b.n	800551a <_dtoa_r+0x9f2>
 8005594:	9a02      	ldr	r2, [sp, #8]
 8005596:	f805 8c01 	strb.w	r8, [r5, #-1]
 800559a:	eba5 030b 	sub.w	r3, r5, fp
 800559e:	4293      	cmp	r3, r2
 80055a0:	d021      	beq.n	80055e6 <_dtoa_r+0xabe>
 80055a2:	2300      	movs	r3, #0
 80055a4:	220a      	movs	r2, #10
 80055a6:	9904      	ldr	r1, [sp, #16]
 80055a8:	4620      	mov	r0, r4
 80055aa:	f000 f8d8 	bl	800575e <__multadd>
 80055ae:	45b1      	cmp	r9, r6
 80055b0:	9004      	str	r0, [sp, #16]
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f04f 020a 	mov.w	r2, #10
 80055ba:	4649      	mov	r1, r9
 80055bc:	4620      	mov	r0, r4
 80055be:	d105      	bne.n	80055cc <_dtoa_r+0xaa4>
 80055c0:	f000 f8cd 	bl	800575e <__multadd>
 80055c4:	4681      	mov	r9, r0
 80055c6:	4606      	mov	r6, r0
 80055c8:	9505      	str	r5, [sp, #20]
 80055ca:	e776      	b.n	80054ba <_dtoa_r+0x992>
 80055cc:	f000 f8c7 	bl	800575e <__multadd>
 80055d0:	4631      	mov	r1, r6
 80055d2:	4681      	mov	r9, r0
 80055d4:	2300      	movs	r3, #0
 80055d6:	220a      	movs	r2, #10
 80055d8:	4620      	mov	r0, r4
 80055da:	f000 f8c0 	bl	800575e <__multadd>
 80055de:	4606      	mov	r6, r0
 80055e0:	e7f2      	b.n	80055c8 <_dtoa_r+0xaa0>
 80055e2:	f04f 0900 	mov.w	r9, #0
 80055e6:	2201      	movs	r2, #1
 80055e8:	9904      	ldr	r1, [sp, #16]
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fa2e 	bl	8005a4c <__lshift>
 80055f0:	4639      	mov	r1, r7
 80055f2:	9004      	str	r0, [sp, #16]
 80055f4:	f000 fa7e 	bl	8005af4 <__mcmp>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	dcb6      	bgt.n	800556a <_dtoa_r+0xa42>
 80055fc:	d102      	bne.n	8005604 <_dtoa_r+0xadc>
 80055fe:	f018 0f01 	tst.w	r8, #1
 8005602:	d1b2      	bne.n	800556a <_dtoa_r+0xa42>
 8005604:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005608:	2b30      	cmp	r3, #48	; 0x30
 800560a:	f105 32ff 	add.w	r2, r5, #4294967295
 800560e:	f47f af0a 	bne.w	8005426 <_dtoa_r+0x8fe>
 8005612:	4615      	mov	r5, r2
 8005614:	e7f6      	b.n	8005604 <_dtoa_r+0xadc>
 8005616:	4593      	cmp	fp, r2
 8005618:	d105      	bne.n	8005626 <_dtoa_r+0xafe>
 800561a:	2331      	movs	r3, #49	; 0x31
 800561c:	f10a 0a01 	add.w	sl, sl, #1
 8005620:	f88b 3000 	strb.w	r3, [fp]
 8005624:	e6ff      	b.n	8005426 <_dtoa_r+0x8fe>
 8005626:	4615      	mov	r5, r2
 8005628:	e79f      	b.n	800556a <_dtoa_r+0xa42>
 800562a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005690 <_dtoa_r+0xb68>
 800562e:	e007      	b.n	8005640 <_dtoa_r+0xb18>
 8005630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005632:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005694 <_dtoa_r+0xb6c>
 8005636:	b11b      	cbz	r3, 8005640 <_dtoa_r+0xb18>
 8005638:	f10b 0308 	add.w	r3, fp, #8
 800563c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	4658      	mov	r0, fp
 8005642:	b017      	add	sp, #92	; 0x5c
 8005644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005648:	9b06      	ldr	r3, [sp, #24]
 800564a:	2b01      	cmp	r3, #1
 800564c:	f77f ae35 	ble.w	80052ba <_dtoa_r+0x792>
 8005650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	e649      	b.n	80052ea <_dtoa_r+0x7c2>
 8005656:	9b02      	ldr	r3, [sp, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dc03      	bgt.n	8005664 <_dtoa_r+0xb3c>
 800565c:	9b06      	ldr	r3, [sp, #24]
 800565e:	2b02      	cmp	r3, #2
 8005660:	f73f aecc 	bgt.w	80053fc <_dtoa_r+0x8d4>
 8005664:	465d      	mov	r5, fp
 8005666:	4639      	mov	r1, r7
 8005668:	9804      	ldr	r0, [sp, #16]
 800566a:	f7ff f9ce 	bl	8004a0a <quorem>
 800566e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005672:	f805 8b01 	strb.w	r8, [r5], #1
 8005676:	9a02      	ldr	r2, [sp, #8]
 8005678:	eba5 030b 	sub.w	r3, r5, fp
 800567c:	429a      	cmp	r2, r3
 800567e:	ddb0      	ble.n	80055e2 <_dtoa_r+0xaba>
 8005680:	2300      	movs	r3, #0
 8005682:	220a      	movs	r2, #10
 8005684:	9904      	ldr	r1, [sp, #16]
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f869 	bl	800575e <__multadd>
 800568c:	9004      	str	r0, [sp, #16]
 800568e:	e7ea      	b.n	8005666 <_dtoa_r+0xb3e>
 8005690:	08006106 	.word	0x08006106
 8005694:	0800622b 	.word	0x0800622b

08005698 <_localeconv_r>:
 8005698:	4b04      	ldr	r3, [pc, #16]	; (80056ac <_localeconv_r+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a18      	ldr	r0, [r3, #32]
 800569e:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <_localeconv_r+0x18>)
 80056a0:	2800      	cmp	r0, #0
 80056a2:	bf08      	it	eq
 80056a4:	4618      	moveq	r0, r3
 80056a6:	30f0      	adds	r0, #240	; 0xf0
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	2000000c 	.word	0x2000000c
 80056b0:	20000070 	.word	0x20000070

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f7fe bca1 	b.w	8004000 <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	2000000c 	.word	0x2000000c

080056c4 <__malloc_lock>:
 80056c4:	4770      	bx	lr

080056c6 <__malloc_unlock>:
 80056c6:	4770      	bx	lr

080056c8 <_Balloc>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056cc:	4604      	mov	r4, r0
 80056ce:	460e      	mov	r6, r1
 80056d0:	b93d      	cbnz	r5, 80056e2 <_Balloc+0x1a>
 80056d2:	2010      	movs	r0, #16
 80056d4:	f7ff ffee 	bl	80056b4 <malloc>
 80056d8:	6260      	str	r0, [r4, #36]	; 0x24
 80056da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056de:	6005      	str	r5, [r0, #0]
 80056e0:	60c5      	str	r5, [r0, #12]
 80056e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056e4:	68eb      	ldr	r3, [r5, #12]
 80056e6:	b183      	cbz	r3, 800570a <_Balloc+0x42>
 80056e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80056f0:	b9b8      	cbnz	r0, 8005722 <_Balloc+0x5a>
 80056f2:	2101      	movs	r1, #1
 80056f4:	fa01 f506 	lsl.w	r5, r1, r6
 80056f8:	1d6a      	adds	r2, r5, #5
 80056fa:	0092      	lsls	r2, r2, #2
 80056fc:	4620      	mov	r0, r4
 80056fe:	f000 fabf 	bl	8005c80 <_calloc_r>
 8005702:	b160      	cbz	r0, 800571e <_Balloc+0x56>
 8005704:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005708:	e00e      	b.n	8005728 <_Balloc+0x60>
 800570a:	2221      	movs	r2, #33	; 0x21
 800570c:	2104      	movs	r1, #4
 800570e:	4620      	mov	r0, r4
 8005710:	f000 fab6 	bl	8005c80 <_calloc_r>
 8005714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005716:	60e8      	str	r0, [r5, #12]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e4      	bne.n	80056e8 <_Balloc+0x20>
 800571e:	2000      	movs	r0, #0
 8005720:	bd70      	pop	{r4, r5, r6, pc}
 8005722:	6802      	ldr	r2, [r0, #0]
 8005724:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005728:	2300      	movs	r3, #0
 800572a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800572e:	e7f7      	b.n	8005720 <_Balloc+0x58>

08005730 <_Bfree>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005734:	4606      	mov	r6, r0
 8005736:	460d      	mov	r5, r1
 8005738:	b93c      	cbnz	r4, 800574a <_Bfree+0x1a>
 800573a:	2010      	movs	r0, #16
 800573c:	f7ff ffba 	bl	80056b4 <malloc>
 8005740:	6270      	str	r0, [r6, #36]	; 0x24
 8005742:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005746:	6004      	str	r4, [r0, #0]
 8005748:	60c4      	str	r4, [r0, #12]
 800574a:	b13d      	cbz	r5, 800575c <_Bfree+0x2c>
 800574c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800574e:	686a      	ldr	r2, [r5, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800575c:	bd70      	pop	{r4, r5, r6, pc}

0800575e <__multadd>:
 800575e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005762:	690d      	ldr	r5, [r1, #16]
 8005764:	461f      	mov	r7, r3
 8005766:	4606      	mov	r6, r0
 8005768:	460c      	mov	r4, r1
 800576a:	f101 0c14 	add.w	ip, r1, #20
 800576e:	2300      	movs	r3, #0
 8005770:	f8dc 0000 	ldr.w	r0, [ip]
 8005774:	b281      	uxth	r1, r0
 8005776:	fb02 7101 	mla	r1, r2, r1, r7
 800577a:	0c0f      	lsrs	r7, r1, #16
 800577c:	0c00      	lsrs	r0, r0, #16
 800577e:	fb02 7000 	mla	r0, r2, r0, r7
 8005782:	b289      	uxth	r1, r1
 8005784:	3301      	adds	r3, #1
 8005786:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800578a:	429d      	cmp	r5, r3
 800578c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005790:	f84c 1b04 	str.w	r1, [ip], #4
 8005794:	dcec      	bgt.n	8005770 <__multadd+0x12>
 8005796:	b1d7      	cbz	r7, 80057ce <__multadd+0x70>
 8005798:	68a3      	ldr	r3, [r4, #8]
 800579a:	42ab      	cmp	r3, r5
 800579c:	dc12      	bgt.n	80057c4 <__multadd+0x66>
 800579e:	6861      	ldr	r1, [r4, #4]
 80057a0:	4630      	mov	r0, r6
 80057a2:	3101      	adds	r1, #1
 80057a4:	f7ff ff90 	bl	80056c8 <_Balloc>
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	3202      	adds	r2, #2
 80057ac:	f104 010c 	add.w	r1, r4, #12
 80057b0:	4680      	mov	r8, r0
 80057b2:	0092      	lsls	r2, r2, #2
 80057b4:	300c      	adds	r0, #12
 80057b6:	f7fe fbc1 	bl	8003f3c <memcpy>
 80057ba:	4621      	mov	r1, r4
 80057bc:	4630      	mov	r0, r6
 80057be:	f7ff ffb7 	bl	8005730 <_Bfree>
 80057c2:	4644      	mov	r4, r8
 80057c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057c8:	3501      	adds	r5, #1
 80057ca:	615f      	str	r7, [r3, #20]
 80057cc:	6125      	str	r5, [r4, #16]
 80057ce:	4620      	mov	r0, r4
 80057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057d4 <__hi0bits>:
 80057d4:	0c02      	lsrs	r2, r0, #16
 80057d6:	0412      	lsls	r2, r2, #16
 80057d8:	4603      	mov	r3, r0
 80057da:	b9b2      	cbnz	r2, 800580a <__hi0bits+0x36>
 80057dc:	0403      	lsls	r3, r0, #16
 80057de:	2010      	movs	r0, #16
 80057e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80057e4:	bf04      	itt	eq
 80057e6:	021b      	lsleq	r3, r3, #8
 80057e8:	3008      	addeq	r0, #8
 80057ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80057ee:	bf04      	itt	eq
 80057f0:	011b      	lsleq	r3, r3, #4
 80057f2:	3004      	addeq	r0, #4
 80057f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80057f8:	bf04      	itt	eq
 80057fa:	009b      	lsleq	r3, r3, #2
 80057fc:	3002      	addeq	r0, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	db06      	blt.n	8005810 <__hi0bits+0x3c>
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	d503      	bpl.n	800580e <__hi0bits+0x3a>
 8005806:	3001      	adds	r0, #1
 8005808:	4770      	bx	lr
 800580a:	2000      	movs	r0, #0
 800580c:	e7e8      	b.n	80057e0 <__hi0bits+0xc>
 800580e:	2020      	movs	r0, #32
 8005810:	4770      	bx	lr

08005812 <__lo0bits>:
 8005812:	6803      	ldr	r3, [r0, #0]
 8005814:	f013 0207 	ands.w	r2, r3, #7
 8005818:	4601      	mov	r1, r0
 800581a:	d00b      	beq.n	8005834 <__lo0bits+0x22>
 800581c:	07da      	lsls	r2, r3, #31
 800581e:	d423      	bmi.n	8005868 <__lo0bits+0x56>
 8005820:	0798      	lsls	r0, r3, #30
 8005822:	bf49      	itett	mi
 8005824:	085b      	lsrmi	r3, r3, #1
 8005826:	089b      	lsrpl	r3, r3, #2
 8005828:	2001      	movmi	r0, #1
 800582a:	600b      	strmi	r3, [r1, #0]
 800582c:	bf5c      	itt	pl
 800582e:	600b      	strpl	r3, [r1, #0]
 8005830:	2002      	movpl	r0, #2
 8005832:	4770      	bx	lr
 8005834:	b298      	uxth	r0, r3
 8005836:	b9a8      	cbnz	r0, 8005864 <__lo0bits+0x52>
 8005838:	0c1b      	lsrs	r3, r3, #16
 800583a:	2010      	movs	r0, #16
 800583c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005840:	bf04      	itt	eq
 8005842:	0a1b      	lsreq	r3, r3, #8
 8005844:	3008      	addeq	r0, #8
 8005846:	071a      	lsls	r2, r3, #28
 8005848:	bf04      	itt	eq
 800584a:	091b      	lsreq	r3, r3, #4
 800584c:	3004      	addeq	r0, #4
 800584e:	079a      	lsls	r2, r3, #30
 8005850:	bf04      	itt	eq
 8005852:	089b      	lsreq	r3, r3, #2
 8005854:	3002      	addeq	r0, #2
 8005856:	07da      	lsls	r2, r3, #31
 8005858:	d402      	bmi.n	8005860 <__lo0bits+0x4e>
 800585a:	085b      	lsrs	r3, r3, #1
 800585c:	d006      	beq.n	800586c <__lo0bits+0x5a>
 800585e:	3001      	adds	r0, #1
 8005860:	600b      	str	r3, [r1, #0]
 8005862:	4770      	bx	lr
 8005864:	4610      	mov	r0, r2
 8005866:	e7e9      	b.n	800583c <__lo0bits+0x2a>
 8005868:	2000      	movs	r0, #0
 800586a:	4770      	bx	lr
 800586c:	2020      	movs	r0, #32
 800586e:	4770      	bx	lr

08005870 <__i2b>:
 8005870:	b510      	push	{r4, lr}
 8005872:	460c      	mov	r4, r1
 8005874:	2101      	movs	r1, #1
 8005876:	f7ff ff27 	bl	80056c8 <_Balloc>
 800587a:	2201      	movs	r2, #1
 800587c:	6144      	str	r4, [r0, #20]
 800587e:	6102      	str	r2, [r0, #16]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__multiply>:
 8005882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005886:	4614      	mov	r4, r2
 8005888:	690a      	ldr	r2, [r1, #16]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	bfb8      	it	lt
 8005890:	460b      	movlt	r3, r1
 8005892:	4688      	mov	r8, r1
 8005894:	bfbc      	itt	lt
 8005896:	46a0      	movlt	r8, r4
 8005898:	461c      	movlt	r4, r3
 800589a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800589e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80058a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80058aa:	eb07 0609 	add.w	r6, r7, r9
 80058ae:	42b3      	cmp	r3, r6
 80058b0:	bfb8      	it	lt
 80058b2:	3101      	addlt	r1, #1
 80058b4:	f7ff ff08 	bl	80056c8 <_Balloc>
 80058b8:	f100 0514 	add.w	r5, r0, #20
 80058bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80058c0:	462b      	mov	r3, r5
 80058c2:	2200      	movs	r2, #0
 80058c4:	4573      	cmp	r3, lr
 80058c6:	d316      	bcc.n	80058f6 <__multiply+0x74>
 80058c8:	f104 0214 	add.w	r2, r4, #20
 80058cc:	f108 0114 	add.w	r1, r8, #20
 80058d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80058d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	9201      	str	r2, [sp, #4]
 80058de:	4293      	cmp	r3, r2
 80058e0:	d80c      	bhi.n	80058fc <__multiply+0x7a>
 80058e2:	2e00      	cmp	r6, #0
 80058e4:	dd03      	ble.n	80058ee <__multiply+0x6c>
 80058e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d05d      	beq.n	80059aa <__multiply+0x128>
 80058ee:	6106      	str	r6, [r0, #16]
 80058f0:	b003      	add	sp, #12
 80058f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f6:	f843 2b04 	str.w	r2, [r3], #4
 80058fa:	e7e3      	b.n	80058c4 <__multiply+0x42>
 80058fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8005900:	f1bb 0f00 	cmp.w	fp, #0
 8005904:	d023      	beq.n	800594e <__multiply+0xcc>
 8005906:	4689      	mov	r9, r1
 8005908:	46ac      	mov	ip, r5
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	f859 4b04 	ldr.w	r4, [r9], #4
 8005912:	f8dc a000 	ldr.w	sl, [ip]
 8005916:	b2a3      	uxth	r3, r4
 8005918:	fa1f fa8a 	uxth.w	sl, sl
 800591c:	fb0b a303 	mla	r3, fp, r3, sl
 8005920:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005924:	f8dc 4000 	ldr.w	r4, [ip]
 8005928:	4443      	add	r3, r8
 800592a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800592e:	fb0b 840a 	mla	r4, fp, sl, r8
 8005932:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005936:	46e2      	mov	sl, ip
 8005938:	b29b      	uxth	r3, r3
 800593a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800593e:	454f      	cmp	r7, r9
 8005940:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005944:	f84a 3b04 	str.w	r3, [sl], #4
 8005948:	d82b      	bhi.n	80059a2 <__multiply+0x120>
 800594a:	f8cc 8004 	str.w	r8, [ip, #4]
 800594e:	9b01      	ldr	r3, [sp, #4]
 8005950:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005954:	3204      	adds	r2, #4
 8005956:	f1ba 0f00 	cmp.w	sl, #0
 800595a:	d020      	beq.n	800599e <__multiply+0x11c>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	4689      	mov	r9, r1
 8005960:	46a8      	mov	r8, r5
 8005962:	f04f 0b00 	mov.w	fp, #0
 8005966:	f8b9 c000 	ldrh.w	ip, [r9]
 800596a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800596e:	fb0a 440c 	mla	r4, sl, ip, r4
 8005972:	445c      	add	r4, fp
 8005974:	46c4      	mov	ip, r8
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800597c:	f84c 3b04 	str.w	r3, [ip], #4
 8005980:	f859 3b04 	ldr.w	r3, [r9], #4
 8005984:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005988:	0c1b      	lsrs	r3, r3, #16
 800598a:	fb0a b303 	mla	r3, sl, r3, fp
 800598e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005992:	454f      	cmp	r7, r9
 8005994:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005998:	d805      	bhi.n	80059a6 <__multiply+0x124>
 800599a:	f8c8 3004 	str.w	r3, [r8, #4]
 800599e:	3504      	adds	r5, #4
 80059a0:	e79b      	b.n	80058da <__multiply+0x58>
 80059a2:	46d4      	mov	ip, sl
 80059a4:	e7b3      	b.n	800590e <__multiply+0x8c>
 80059a6:	46e0      	mov	r8, ip
 80059a8:	e7dd      	b.n	8005966 <__multiply+0xe4>
 80059aa:	3e01      	subs	r6, #1
 80059ac:	e799      	b.n	80058e2 <__multiply+0x60>
	...

080059b0 <__pow5mult>:
 80059b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059b4:	4615      	mov	r5, r2
 80059b6:	f012 0203 	ands.w	r2, r2, #3
 80059ba:	4606      	mov	r6, r0
 80059bc:	460f      	mov	r7, r1
 80059be:	d007      	beq.n	80059d0 <__pow5mult+0x20>
 80059c0:	3a01      	subs	r2, #1
 80059c2:	4c21      	ldr	r4, [pc, #132]	; (8005a48 <__pow5mult+0x98>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80059ca:	f7ff fec8 	bl	800575e <__multadd>
 80059ce:	4607      	mov	r7, r0
 80059d0:	10ad      	asrs	r5, r5, #2
 80059d2:	d035      	beq.n	8005a40 <__pow5mult+0x90>
 80059d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80059d6:	b93c      	cbnz	r4, 80059e8 <__pow5mult+0x38>
 80059d8:	2010      	movs	r0, #16
 80059da:	f7ff fe6b 	bl	80056b4 <malloc>
 80059de:	6270      	str	r0, [r6, #36]	; 0x24
 80059e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059e4:	6004      	str	r4, [r0, #0]
 80059e6:	60c4      	str	r4, [r0, #12]
 80059e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059f0:	b94c      	cbnz	r4, 8005a06 <__pow5mult+0x56>
 80059f2:	f240 2171 	movw	r1, #625	; 0x271
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ff3a 	bl	8005870 <__i2b>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a02:	4604      	mov	r4, r0
 8005a04:	6003      	str	r3, [r0, #0]
 8005a06:	f04f 0800 	mov.w	r8, #0
 8005a0a:	07eb      	lsls	r3, r5, #31
 8005a0c:	d50a      	bpl.n	8005a24 <__pow5mult+0x74>
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4622      	mov	r2, r4
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff ff35 	bl	8005882 <__multiply>
 8005a18:	4639      	mov	r1, r7
 8005a1a:	4681      	mov	r9, r0
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff fe87 	bl	8005730 <_Bfree>
 8005a22:	464f      	mov	r7, r9
 8005a24:	106d      	asrs	r5, r5, #1
 8005a26:	d00b      	beq.n	8005a40 <__pow5mult+0x90>
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	b938      	cbnz	r0, 8005a3c <__pow5mult+0x8c>
 8005a2c:	4622      	mov	r2, r4
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff ff26 	bl	8005882 <__multiply>
 8005a36:	6020      	str	r0, [r4, #0]
 8005a38:	f8c0 8000 	str.w	r8, [r0]
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	e7e4      	b.n	8005a0a <__pow5mult+0x5a>
 8005a40:	4638      	mov	r0, r7
 8005a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a46:	bf00      	nop
 8005a48:	08006328 	.word	0x08006328

08005a4c <__lshift>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	460c      	mov	r4, r1
 8005a52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a56:	6923      	ldr	r3, [r4, #16]
 8005a58:	6849      	ldr	r1, [r1, #4]
 8005a5a:	eb0a 0903 	add.w	r9, sl, r3
 8005a5e:	68a3      	ldr	r3, [r4, #8]
 8005a60:	4607      	mov	r7, r0
 8005a62:	4616      	mov	r6, r2
 8005a64:	f109 0501 	add.w	r5, r9, #1
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	db32      	blt.n	8005ad2 <__lshift+0x86>
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff fe2b 	bl	80056c8 <_Balloc>
 8005a72:	2300      	movs	r3, #0
 8005a74:	4680      	mov	r8, r0
 8005a76:	f100 0114 	add.w	r1, r0, #20
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4553      	cmp	r3, sl
 8005a7e:	db2b      	blt.n	8005ad8 <__lshift+0x8c>
 8005a80:	6920      	ldr	r0, [r4, #16]
 8005a82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a86:	f104 0314 	add.w	r3, r4, #20
 8005a8a:	f016 021f 	ands.w	r2, r6, #31
 8005a8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a96:	d025      	beq.n	8005ae4 <__lshift+0x98>
 8005a98:	f1c2 0e20 	rsb	lr, r2, #32
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	681e      	ldr	r6, [r3, #0]
 8005aa0:	468a      	mov	sl, r1
 8005aa2:	4096      	lsls	r6, r2
 8005aa4:	4330      	orrs	r0, r6
 8005aa6:	f84a 0b04 	str.w	r0, [sl], #4
 8005aaa:	f853 0b04 	ldr.w	r0, [r3], #4
 8005aae:	459c      	cmp	ip, r3
 8005ab0:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ab4:	d814      	bhi.n	8005ae0 <__lshift+0x94>
 8005ab6:	6048      	str	r0, [r1, #4]
 8005ab8:	b108      	cbz	r0, 8005abe <__lshift+0x72>
 8005aba:	f109 0502 	add.w	r5, r9, #2
 8005abe:	3d01      	subs	r5, #1
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f7ff fe32 	bl	8005730 <_Bfree>
 8005acc:	4640      	mov	r0, r8
 8005ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad2:	3101      	adds	r1, #1
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	e7c7      	b.n	8005a68 <__lshift+0x1c>
 8005ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005adc:	3301      	adds	r3, #1
 8005ade:	e7cd      	b.n	8005a7c <__lshift+0x30>
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	e7dc      	b.n	8005a9e <__lshift+0x52>
 8005ae4:	3904      	subs	r1, #4
 8005ae6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aea:	f841 2f04 	str.w	r2, [r1, #4]!
 8005aee:	459c      	cmp	ip, r3
 8005af0:	d8f9      	bhi.n	8005ae6 <__lshift+0x9a>
 8005af2:	e7e4      	b.n	8005abe <__lshift+0x72>

08005af4 <__mcmp>:
 8005af4:	6903      	ldr	r3, [r0, #16]
 8005af6:	690a      	ldr	r2, [r1, #16]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	b530      	push	{r4, r5, lr}
 8005afc:	d10c      	bne.n	8005b18 <__mcmp+0x24>
 8005afe:	0092      	lsls	r2, r2, #2
 8005b00:	3014      	adds	r0, #20
 8005b02:	3114      	adds	r1, #20
 8005b04:	1884      	adds	r4, r0, r2
 8005b06:	4411      	add	r1, r2
 8005b08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b10:	4295      	cmp	r5, r2
 8005b12:	d003      	beq.n	8005b1c <__mcmp+0x28>
 8005b14:	d305      	bcc.n	8005b22 <__mcmp+0x2e>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd30      	pop	{r4, r5, pc}
 8005b1c:	42a0      	cmp	r0, r4
 8005b1e:	d3f3      	bcc.n	8005b08 <__mcmp+0x14>
 8005b20:	e7fa      	b.n	8005b18 <__mcmp+0x24>
 8005b22:	f04f 33ff 	mov.w	r3, #4294967295
 8005b26:	e7f7      	b.n	8005b18 <__mcmp+0x24>

08005b28 <__mdiff>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4607      	mov	r7, r0
 8005b30:	4611      	mov	r1, r2
 8005b32:	4628      	mov	r0, r5
 8005b34:	4614      	mov	r4, r2
 8005b36:	f7ff ffdd 	bl	8005af4 <__mcmp>
 8005b3a:	1e06      	subs	r6, r0, #0
 8005b3c:	d108      	bne.n	8005b50 <__mdiff+0x28>
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4638      	mov	r0, r7
 8005b42:	f7ff fdc1 	bl	80056c8 <_Balloc>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b50:	bfa4      	itt	ge
 8005b52:	4623      	movge	r3, r4
 8005b54:	462c      	movge	r4, r5
 8005b56:	4638      	mov	r0, r7
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	bfa6      	itte	ge
 8005b5c:	461d      	movge	r5, r3
 8005b5e:	2600      	movge	r6, #0
 8005b60:	2601      	movlt	r6, #1
 8005b62:	f7ff fdb1 	bl	80056c8 <_Balloc>
 8005b66:	692b      	ldr	r3, [r5, #16]
 8005b68:	60c6      	str	r6, [r0, #12]
 8005b6a:	6926      	ldr	r6, [r4, #16]
 8005b6c:	f105 0914 	add.w	r9, r5, #20
 8005b70:	f104 0214 	add.w	r2, r4, #20
 8005b74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b7c:	f100 0514 	add.w	r5, r0, #20
 8005b80:	f04f 0e00 	mov.w	lr, #0
 8005b84:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b88:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b8c:	fa1e f18a 	uxtah	r1, lr, sl
 8005b90:	b2a3      	uxth	r3, r4
 8005b92:	1ac9      	subs	r1, r1, r3
 8005b94:	0c23      	lsrs	r3, r4, #16
 8005b96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b9e:	b289      	uxth	r1, r1
 8005ba0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ba4:	45c8      	cmp	r8, r9
 8005ba6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005baa:	4694      	mov	ip, r2
 8005bac:	f845 3b04 	str.w	r3, [r5], #4
 8005bb0:	d8e8      	bhi.n	8005b84 <__mdiff+0x5c>
 8005bb2:	45bc      	cmp	ip, r7
 8005bb4:	d304      	bcc.n	8005bc0 <__mdiff+0x98>
 8005bb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005bba:	b183      	cbz	r3, 8005bde <__mdiff+0xb6>
 8005bbc:	6106      	str	r6, [r0, #16]
 8005bbe:	e7c5      	b.n	8005b4c <__mdiff+0x24>
 8005bc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bc4:	fa1e f381 	uxtah	r3, lr, r1
 8005bc8:	141a      	asrs	r2, r3, #16
 8005bca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005bd8:	f845 3b04 	str.w	r3, [r5], #4
 8005bdc:	e7e9      	b.n	8005bb2 <__mdiff+0x8a>
 8005bde:	3e01      	subs	r6, #1
 8005be0:	e7e9      	b.n	8005bb6 <__mdiff+0x8e>

08005be2 <__d2b>:
 8005be2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005be6:	460e      	mov	r6, r1
 8005be8:	2101      	movs	r1, #1
 8005bea:	ec59 8b10 	vmov	r8, r9, d0
 8005bee:	4615      	mov	r5, r2
 8005bf0:	f7ff fd6a 	bl	80056c8 <_Balloc>
 8005bf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bfe:	bb34      	cbnz	r4, 8005c4e <__d2b+0x6c>
 8005c00:	9301      	str	r3, [sp, #4]
 8005c02:	f1b8 0300 	subs.w	r3, r8, #0
 8005c06:	d027      	beq.n	8005c58 <__d2b+0x76>
 8005c08:	a802      	add	r0, sp, #8
 8005c0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005c0e:	f7ff fe00 	bl	8005812 <__lo0bits>
 8005c12:	9900      	ldr	r1, [sp, #0]
 8005c14:	b1f0      	cbz	r0, 8005c54 <__d2b+0x72>
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	f1c0 0320 	rsb	r3, r0, #32
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	430b      	orrs	r3, r1
 8005c22:	40c2      	lsrs	r2, r0
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	9201      	str	r2, [sp, #4]
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf14      	ite	ne
 8005c30:	2102      	movne	r1, #2
 8005c32:	2101      	moveq	r1, #1
 8005c34:	6139      	str	r1, [r7, #16]
 8005c36:	b1c4      	cbz	r4, 8005c6a <__d2b+0x88>
 8005c38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005c3c:	4404      	add	r4, r0
 8005c3e:	6034      	str	r4, [r6, #0]
 8005c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c44:	6028      	str	r0, [r5, #0]
 8005c46:	4638      	mov	r0, r7
 8005c48:	b003      	add	sp, #12
 8005c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c52:	e7d5      	b.n	8005c00 <__d2b+0x1e>
 8005c54:	6179      	str	r1, [r7, #20]
 8005c56:	e7e7      	b.n	8005c28 <__d2b+0x46>
 8005c58:	a801      	add	r0, sp, #4
 8005c5a:	f7ff fdda 	bl	8005812 <__lo0bits>
 8005c5e:	9b01      	ldr	r3, [sp, #4]
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	2101      	movs	r1, #1
 8005c64:	6139      	str	r1, [r7, #16]
 8005c66:	3020      	adds	r0, #32
 8005c68:	e7e5      	b.n	8005c36 <__d2b+0x54>
 8005c6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c72:	6030      	str	r0, [r6, #0]
 8005c74:	6918      	ldr	r0, [r3, #16]
 8005c76:	f7ff fdad 	bl	80057d4 <__hi0bits>
 8005c7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c7e:	e7e1      	b.n	8005c44 <__d2b+0x62>

08005c80 <_calloc_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	fb02 f401 	mul.w	r4, r2, r1
 8005c86:	4621      	mov	r1, r4
 8005c88:	f7fe f9ba 	bl	8004000 <_malloc_r>
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	b118      	cbz	r0, 8005c98 <_calloc_r+0x18>
 8005c90:	4622      	mov	r2, r4
 8005c92:	2100      	movs	r1, #0
 8005c94:	f7fe f95d 	bl	8003f52 <memset>
 8005c98:	4628      	mov	r0, r5
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}

08005c9c <_realloc_r>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	460e      	mov	r6, r1
 8005ca4:	b921      	cbnz	r1, 8005cb0 <_realloc_r+0x14>
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cac:	f7fe b9a8 	b.w	8004000 <_malloc_r>
 8005cb0:	b922      	cbnz	r2, 8005cbc <_realloc_r+0x20>
 8005cb2:	f7fe f957 	bl	8003f64 <_free_r>
 8005cb6:	4625      	mov	r5, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cbc:	f000 f97f 	bl	8005fbe <_malloc_usable_size_r>
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d20f      	bcs.n	8005ce4 <_realloc_r+0x48>
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7fe f99a 	bl	8004000 <_malloc_r>
 8005ccc:	4605      	mov	r5, r0
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d0f2      	beq.n	8005cb8 <_realloc_r+0x1c>
 8005cd2:	4631      	mov	r1, r6
 8005cd4:	4622      	mov	r2, r4
 8005cd6:	f7fe f931 	bl	8003f3c <memcpy>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4638      	mov	r0, r7
 8005cde:	f7fe f941 	bl	8003f64 <_free_r>
 8005ce2:	e7e9      	b.n	8005cb8 <_realloc_r+0x1c>
 8005ce4:	4635      	mov	r5, r6
 8005ce6:	e7e7      	b.n	8005cb8 <_realloc_r+0x1c>

08005ce8 <__ssputs_r>:
 8005ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cec:	688e      	ldr	r6, [r1, #8]
 8005cee:	429e      	cmp	r6, r3
 8005cf0:	4682      	mov	sl, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	4690      	mov	r8, r2
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	d837      	bhi.n	8005d6a <__ssputs_r+0x82>
 8005cfa:	898a      	ldrh	r2, [r1, #12]
 8005cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d00:	d031      	beq.n	8005d66 <__ssputs_r+0x7e>
 8005d02:	6825      	ldr	r5, [r4, #0]
 8005d04:	6909      	ldr	r1, [r1, #16]
 8005d06:	1a6f      	subs	r7, r5, r1
 8005d08:	6965      	ldr	r5, [r4, #20]
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d10:	fb95 f5f3 	sdiv	r5, r5, r3
 8005d14:	f109 0301 	add.w	r3, r9, #1
 8005d18:	443b      	add	r3, r7
 8005d1a:	429d      	cmp	r5, r3
 8005d1c:	bf38      	it	cc
 8005d1e:	461d      	movcc	r5, r3
 8005d20:	0553      	lsls	r3, r2, #21
 8005d22:	d530      	bpl.n	8005d86 <__ssputs_r+0x9e>
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fe f96b 	bl	8004000 <_malloc_r>
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	b950      	cbnz	r0, 8005d44 <__ssputs_r+0x5c>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	f8ca 3000 	str.w	r3, [sl]
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	463a      	mov	r2, r7
 8005d46:	6921      	ldr	r1, [r4, #16]
 8005d48:	f7fe f8f8 	bl	8003f3c <memcpy>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	6126      	str	r6, [r4, #16]
 8005d5a:	6165      	str	r5, [r4, #20]
 8005d5c:	443e      	add	r6, r7
 8005d5e:	1bed      	subs	r5, r5, r7
 8005d60:	6026      	str	r6, [r4, #0]
 8005d62:	60a5      	str	r5, [r4, #8]
 8005d64:	464e      	mov	r6, r9
 8005d66:	454e      	cmp	r6, r9
 8005d68:	d900      	bls.n	8005d6c <__ssputs_r+0x84>
 8005d6a:	464e      	mov	r6, r9
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4641      	mov	r1, r8
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	f000 f90b 	bl	8005f8c <memmove>
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	1b9b      	subs	r3, r3, r6
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	6823      	ldr	r3, [r4, #0]
 8005d7e:	441e      	add	r6, r3
 8005d80:	6026      	str	r6, [r4, #0]
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7dc      	b.n	8005d40 <__ssputs_r+0x58>
 8005d86:	462a      	mov	r2, r5
 8005d88:	f7ff ff88 	bl	8005c9c <_realloc_r>
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d1e2      	bne.n	8005d58 <__ssputs_r+0x70>
 8005d92:	6921      	ldr	r1, [r4, #16]
 8005d94:	4650      	mov	r0, sl
 8005d96:	f7fe f8e5 	bl	8003f64 <_free_r>
 8005d9a:	e7c8      	b.n	8005d2e <__ssputs_r+0x46>

08005d9c <_svfiprintf_r>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	461d      	mov	r5, r3
 8005da2:	898b      	ldrh	r3, [r1, #12]
 8005da4:	061f      	lsls	r7, r3, #24
 8005da6:	b09d      	sub	sp, #116	; 0x74
 8005da8:	4680      	mov	r8, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	4616      	mov	r6, r2
 8005dae:	d50f      	bpl.n	8005dd0 <_svfiprintf_r+0x34>
 8005db0:	690b      	ldr	r3, [r1, #16]
 8005db2:	b96b      	cbnz	r3, 8005dd0 <_svfiprintf_r+0x34>
 8005db4:	2140      	movs	r1, #64	; 0x40
 8005db6:	f7fe f923 	bl	8004000 <_malloc_r>
 8005dba:	6020      	str	r0, [r4, #0]
 8005dbc:	6120      	str	r0, [r4, #16]
 8005dbe:	b928      	cbnz	r0, 8005dcc <_svfiprintf_r+0x30>
 8005dc0:	230c      	movs	r3, #12
 8005dc2:	f8c8 3000 	str.w	r3, [r8]
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	e0c8      	b.n	8005f5e <_svfiprintf_r+0x1c2>
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	6163      	str	r3, [r4, #20]
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dda:	2330      	movs	r3, #48	; 0x30
 8005ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005de0:	9503      	str	r5, [sp, #12]
 8005de2:	f04f 0b01 	mov.w	fp, #1
 8005de6:	4637      	mov	r7, r6
 8005de8:	463d      	mov	r5, r7
 8005dea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005dee:	b10b      	cbz	r3, 8005df4 <_svfiprintf_r+0x58>
 8005df0:	2b25      	cmp	r3, #37	; 0x25
 8005df2:	d13e      	bne.n	8005e72 <_svfiprintf_r+0xd6>
 8005df4:	ebb7 0a06 	subs.w	sl, r7, r6
 8005df8:	d00b      	beq.n	8005e12 <_svfiprintf_r+0x76>
 8005dfa:	4653      	mov	r3, sl
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4640      	mov	r0, r8
 8005e02:	f7ff ff71 	bl	8005ce8 <__ssputs_r>
 8005e06:	3001      	adds	r0, #1
 8005e08:	f000 80a4 	beq.w	8005f54 <_svfiprintf_r+0x1b8>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0e:	4453      	add	r3, sl
 8005e10:	9309      	str	r3, [sp, #36]	; 0x24
 8005e12:	783b      	ldrb	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 809d 	beq.w	8005f54 <_svfiprintf_r+0x1b8>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e24:	9304      	str	r3, [sp, #16]
 8005e26:	9307      	str	r3, [sp, #28]
 8005e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e2e:	462f      	mov	r7, r5
 8005e30:	2205      	movs	r2, #5
 8005e32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005e36:	4850      	ldr	r0, [pc, #320]	; (8005f78 <_svfiprintf_r+0x1dc>)
 8005e38:	f7fa f9ca 	bl	80001d0 <memchr>
 8005e3c:	9b04      	ldr	r3, [sp, #16]
 8005e3e:	b9d0      	cbnz	r0, 8005e76 <_svfiprintf_r+0xda>
 8005e40:	06d9      	lsls	r1, r3, #27
 8005e42:	bf44      	itt	mi
 8005e44:	2220      	movmi	r2, #32
 8005e46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e4a:	071a      	lsls	r2, r3, #28
 8005e4c:	bf44      	itt	mi
 8005e4e:	222b      	movmi	r2, #43	; 0x2b
 8005e50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e54:	782a      	ldrb	r2, [r5, #0]
 8005e56:	2a2a      	cmp	r2, #42	; 0x2a
 8005e58:	d015      	beq.n	8005e86 <_svfiprintf_r+0xea>
 8005e5a:	9a07      	ldr	r2, [sp, #28]
 8005e5c:	462f      	mov	r7, r5
 8005e5e:	2000      	movs	r0, #0
 8005e60:	250a      	movs	r5, #10
 8005e62:	4639      	mov	r1, r7
 8005e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e68:	3b30      	subs	r3, #48	; 0x30
 8005e6a:	2b09      	cmp	r3, #9
 8005e6c:	d94d      	bls.n	8005f0a <_svfiprintf_r+0x16e>
 8005e6e:	b1b8      	cbz	r0, 8005ea0 <_svfiprintf_r+0x104>
 8005e70:	e00f      	b.n	8005e92 <_svfiprintf_r+0xf6>
 8005e72:	462f      	mov	r7, r5
 8005e74:	e7b8      	b.n	8005de8 <_svfiprintf_r+0x4c>
 8005e76:	4a40      	ldr	r2, [pc, #256]	; (8005f78 <_svfiprintf_r+0x1dc>)
 8005e78:	1a80      	subs	r0, r0, r2
 8005e7a:	fa0b f000 	lsl.w	r0, fp, r0
 8005e7e:	4318      	orrs	r0, r3
 8005e80:	9004      	str	r0, [sp, #16]
 8005e82:	463d      	mov	r5, r7
 8005e84:	e7d3      	b.n	8005e2e <_svfiprintf_r+0x92>
 8005e86:	9a03      	ldr	r2, [sp, #12]
 8005e88:	1d11      	adds	r1, r2, #4
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	9103      	str	r1, [sp, #12]
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	db01      	blt.n	8005e96 <_svfiprintf_r+0xfa>
 8005e92:	9207      	str	r2, [sp, #28]
 8005e94:	e004      	b.n	8005ea0 <_svfiprintf_r+0x104>
 8005e96:	4252      	negs	r2, r2
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	9207      	str	r2, [sp, #28]
 8005e9e:	9304      	str	r3, [sp, #16]
 8005ea0:	783b      	ldrb	r3, [r7, #0]
 8005ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ea4:	d10c      	bne.n	8005ec0 <_svfiprintf_r+0x124>
 8005ea6:	787b      	ldrb	r3, [r7, #1]
 8005ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8005eaa:	d133      	bne.n	8005f14 <_svfiprintf_r+0x178>
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	1d1a      	adds	r2, r3, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	9203      	str	r2, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	bfb8      	it	lt
 8005eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ebc:	3702      	adds	r7, #2
 8005ebe:	9305      	str	r3, [sp, #20]
 8005ec0:	4d2e      	ldr	r5, [pc, #184]	; (8005f7c <_svfiprintf_r+0x1e0>)
 8005ec2:	7839      	ldrb	r1, [r7, #0]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fa f982 	bl	80001d0 <memchr>
 8005ecc:	b138      	cbz	r0, 8005ede <_svfiprintf_r+0x142>
 8005ece:	2340      	movs	r3, #64	; 0x40
 8005ed0:	1b40      	subs	r0, r0, r5
 8005ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	4303      	orrs	r3, r0
 8005eda:	3701      	adds	r7, #1
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	7839      	ldrb	r1, [r7, #0]
 8005ee0:	4827      	ldr	r0, [pc, #156]	; (8005f80 <_svfiprintf_r+0x1e4>)
 8005ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee6:	2206      	movs	r2, #6
 8005ee8:	1c7e      	adds	r6, r7, #1
 8005eea:	f7fa f971 	bl	80001d0 <memchr>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d038      	beq.n	8005f64 <_svfiprintf_r+0x1c8>
 8005ef2:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <_svfiprintf_r+0x1e8>)
 8005ef4:	bb13      	cbnz	r3, 8005f3c <_svfiprintf_r+0x1a0>
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	3307      	adds	r3, #7
 8005efa:	f023 0307 	bic.w	r3, r3, #7
 8005efe:	3308      	adds	r3, #8
 8005f00:	9303      	str	r3, [sp, #12]
 8005f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f04:	444b      	add	r3, r9
 8005f06:	9309      	str	r3, [sp, #36]	; 0x24
 8005f08:	e76d      	b.n	8005de6 <_svfiprintf_r+0x4a>
 8005f0a:	fb05 3202 	mla	r2, r5, r2, r3
 8005f0e:	2001      	movs	r0, #1
 8005f10:	460f      	mov	r7, r1
 8005f12:	e7a6      	b.n	8005e62 <_svfiprintf_r+0xc6>
 8005f14:	2300      	movs	r3, #0
 8005f16:	3701      	adds	r7, #1
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	250a      	movs	r5, #10
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f24:	3a30      	subs	r2, #48	; 0x30
 8005f26:	2a09      	cmp	r2, #9
 8005f28:	d903      	bls.n	8005f32 <_svfiprintf_r+0x196>
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0c8      	beq.n	8005ec0 <_svfiprintf_r+0x124>
 8005f2e:	9105      	str	r1, [sp, #20]
 8005f30:	e7c6      	b.n	8005ec0 <_svfiprintf_r+0x124>
 8005f32:	fb05 2101 	mla	r1, r5, r1, r2
 8005f36:	2301      	movs	r3, #1
 8005f38:	4607      	mov	r7, r0
 8005f3a:	e7f0      	b.n	8005f1e <_svfiprintf_r+0x182>
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4622      	mov	r2, r4
 8005f42:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <_svfiprintf_r+0x1ec>)
 8005f44:	a904      	add	r1, sp, #16
 8005f46:	4640      	mov	r0, r8
 8005f48:	f7fe f948 	bl	80041dc <_printf_float>
 8005f4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f50:	4681      	mov	r9, r0
 8005f52:	d1d6      	bne.n	8005f02 <_svfiprintf_r+0x166>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	065b      	lsls	r3, r3, #25
 8005f58:	f53f af35 	bmi.w	8005dc6 <_svfiprintf_r+0x2a>
 8005f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5e:	b01d      	add	sp, #116	; 0x74
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	ab03      	add	r3, sp, #12
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4622      	mov	r2, r4
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <_svfiprintf_r+0x1ec>)
 8005f6c:	a904      	add	r1, sp, #16
 8005f6e:	4640      	mov	r0, r8
 8005f70:	f7fe fbea 	bl	8004748 <_printf_i>
 8005f74:	e7ea      	b.n	8005f4c <_svfiprintf_r+0x1b0>
 8005f76:	bf00      	nop
 8005f78:	08006334 	.word	0x08006334
 8005f7c:	0800633a 	.word	0x0800633a
 8005f80:	0800633e 	.word	0x0800633e
 8005f84:	080041dd 	.word	0x080041dd
 8005f88:	08005ce9 	.word	0x08005ce9

08005f8c <memmove>:
 8005f8c:	4288      	cmp	r0, r1
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	eb01 0302 	add.w	r3, r1, r2
 8005f94:	d807      	bhi.n	8005fa6 <memmove+0x1a>
 8005f96:	1e42      	subs	r2, r0, #1
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	d00a      	beq.n	8005fb2 <memmove+0x26>
 8005f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005fa4:	e7f8      	b.n	8005f98 <memmove+0xc>
 8005fa6:	4283      	cmp	r3, r0
 8005fa8:	d9f5      	bls.n	8005f96 <memmove+0xa>
 8005faa:	1881      	adds	r1, r0, r2
 8005fac:	1ad2      	subs	r2, r2, r3
 8005fae:	42d3      	cmn	r3, r2
 8005fb0:	d100      	bne.n	8005fb4 <memmove+0x28>
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fbc:	e7f7      	b.n	8005fae <memmove+0x22>

08005fbe <_malloc_usable_size_r>:
 8005fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc2:	1f18      	subs	r0, r3, #4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bfbc      	itt	lt
 8005fc8:	580b      	ldrlt	r3, [r1, r0]
 8005fca:	18c0      	addlt	r0, r0, r3
 8005fcc:	4770      	bx	lr
	...

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
